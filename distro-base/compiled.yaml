apiVersion: v1
kind: Namespace
metadata:
  name: auth
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: knative-eventing
---
apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: kubeflow
    istio-injection: enabled
    katib-metricscollector-injection: enabled
  name: kubeflow
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    registry.knative.dev/eventTypes: |
      [
        { "type": "dev.knative.apiserver.resource.add" },
        { "type": "dev.knative.apiserver.resource.delete" },
        { "type": "dev.knative.apiserver.resource.update" },
        { "type": "dev.knative.apiserver.ref.add" },
        { "type": "dev.knative.apiserver.ref.delete" },
        { "type": "dev.knative.apiserver.ref.update" }
      ]
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    duck.knative.dev/source: "true"
    eventing.knative.dev/release: v0.22.1
    eventing.knative.dev/source: "true"
    knative.dev/crd-install: "true"
    kustomize.component: knative
  name: apiserversources.sources.knative.dev
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: eventing-webhook
          namespace: knative-eventing
      conversionReviewVersions:
      - v1
      - v1beta1
  group: sources.knative.dev
  names:
    categories:
    - all
    - knative
    - sources
    kind: ApiServerSource
    plural: apiserversources
    singular: apiserversource
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.sinkUri
      name: Sink
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ApiServerSource is an event source that brings Kubernetes API
          server events into Knative.
        properties:
          spec:
            description: ApiServerSourceSpec defines the desired state of ApiServerSource
              (from the client).
            properties:
              ceOverrides:
                description: CloudEventOverrides defines overrides to control the
                  output format and modifications of the event sent to the sink.
                properties:
                  extensions:
                    additionalProperties:
                      type: string
                    description: Extensions specify what attribute are added or overridden
                      on the outbound event. Each `Extensions` key-value pair are
                      set on the event as an attribute extension independently.
                    type: object
                type: object
              mode:
                description: 'Mode is the mode the receive adapter controller runs
                  under: Ref or Resource. `Ref` sends only the reference to the resource.
                  `Resource` send the full resource.'
                type: string
              owner:
                description: ResourceOwner is an additional filter to only track resources
                  that are owned by a specific resource type. If ResourceOwner matches
                  Resources[n] then Resources[n] is allowed to pass the ResourceOwner
                  filter.
                properties:
                  apiVersion:
                    description: APIVersion - the API version of the resource to watch.
                    type: string
                  kind:
                    description: 'Kind of the resource to watch. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                type: object
              resources:
                description: Resources is the list of resources to watch
                items:
                  properties:
                    apiVersion:
                      description: API version of the resource to watch.
                      type: string
                    controller:
                      description: 'If true, send an event referencing the object
                        controlling the resource Deprecated: Per-resource controller
                        flag will no longer be supported in v1alpha2, please use Spec.Owner
                        as a GKV.'
                      type: boolean
                    controllerSelector:
                      description: 'ControllerSelector restricts this source to objects
                        with a controlling owner reference of the specified kind.
                        Only apiVersion and kind are used. Both are optional. Deprecated:
                        Per-resource owner refs will no longer be supported in v1alpha2,
                        please use Spec.Owner as a GKV.'
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        blockOwnerDeletion:
                          description: If true, AND if the owner has the "foregroundDeletion"
                            finalizer, then the owner cannot be deleted from the key-value
                            store until this reference is removed. Defaults to false.
                            To set this field, a user needs "delete" permission of
                            the owner, otherwise 422 (Unprocessable Entity) will be
                            returned.
                          type: boolean
                        controller:
                          description: If true, this reference points to the managing
                            controller.
                          type: boolean
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                          type: string
                      type: object
                    kind:
                      description: 'Kind of the resource to watch. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    labelSelector:
                      description: 'LabelSelector restricts this source to objects
                        with the selected labels More info: http://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors'
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector
                            requirements. The requirements are ANDed.
                          items:
                            properties:
                              key:
                                description: key is the label key that the selector
                                  applies to.
                                type: string
                              operator:
                                description: operator represents a key's relationship
                                  to a set of values. Valid operators are In, NotIn,
                                  Exists and DoesNotExist.
                                type: string
                              values:
                                description: values is an array of string values.
                                  If the operator is In or NotIn, the values array
                                  must be non-empty. If the operator is Exists or
                                  DoesNotExist, the values array must be empty. This
                                  array is replaced during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                            type: object
                          type: array
                        matchLabels:
                          description: matchLabels is a map of {key,value} pairs.
                            A single {key,value} in the matchLabels map is equivalent
                            to an element of matchExpressions, whose key field is
                            "key", the operator is "In", and the values array contains
                            only "value". The requirements are ANDed.
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                      type: object
                  type: object
                type: array
              serviceAccountName:
                description: ServiceAccountName is the name of the ServiceAccount
                  to use to run this source.
                type: string
              sink:
                description: Sink is a reference to an object that will resolve to
                  a domain name to use as the sink.
                properties:
                  apiVersion:
                    type: string
                  kind:
                    type: string
                  name:
                    type: string
                  namespace:
                    type: string
                  ref:
                    description: Ref points to an Addressable.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead
                          of an entire object, this string should contain a valid
                          JSON/Go field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part
                          of an object.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                  uri:
                    description: URI can be an absolute URL(non-empty scheme and non-empty
                      host) pointing to the target or a relative URI. Relative URIs
                      will be resolved using the base URI retrieved from Ref.
                    type: string
                type: object
            type: object
          status:
            description: ApiServerSourceStatus defines the observed state of ApiServerSource
              (from the controller).
            properties:
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              ceAttributes:
                description: CloudEventAttributes are the specific attributes that
                  the Source uses as part of its CloudEvents.
                items:
                  properties:
                    source:
                      description: Source is the CloudEvents source attribute.
                      type: string
                    type:
                      description: Type refers to the CloudEvent type attribute.'
                      type: string
                  type: object
                type: array
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  required:
                  - type
                  - status
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the "Generation" of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
              sinkUri:
                description: SinkURI is the current active sink URI that has been
                  configured for the Source.
                type: string
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.sinkUri
      name: Sink
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    name: v1alpha2
    schema:
      openAPIV3Schema:
        description: ApiServerSource is an event source that brings Kubernetes API
          server events into Knative.
        properties:
          spec:
            description: ApiServerSourceSpec defines the desired state of ApiServerSource
              (from the client).
            properties:
              ceOverrides:
                description: CloudEventOverrides defines overrides to control the
                  output format and modifications of the event sent to the sink.
                properties:
                  extensions:
                    additionalProperties:
                      type: string
                    description: Extensions specify what attribute are added or overridden
                      on the outbound event. Each `Extensions` key-value pair are
                      set on the event as an attribute extension independently.
                    type: object
                type: object
              mode:
                description: EventMode controls the format of the event. `Reference`
                  sends a dataref event type for the resource under watch. `Resource`
                  send the full resource lifecycle event. Defaults to `Reference`
                type: string
              owner:
                description: ResourceOwner is an additional filter to only track resources
                  that are owned by a specific resource type. If ResourceOwner matches
                  Resources[n] then Resources[n] is allowed to pass the ResourceOwner
                  filter.
                properties:
                  apiVersion:
                    description: APIVersion - the API version of the resource to watch.
                    type: string
                  kind:
                    description: 'Kind of the resource to watch. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                type: object
              resources:
                description: Resource are the resources this source will track and
                  send related lifecycle events from the Kubernetes ApiServer, with
                  an optional label selector to help filter.
                items:
                  properties:
                    apiVersion:
                      description: APIVersion - the API version of the resource to
                        watch.
                      type: string
                    kind:
                      description: 'Kind of the resource to watch. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    selector:
                      description: 'LabelSelector filters this source to objects to
                        those resources pass the label selector. More info: http://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors'
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector
                            requirements. The requirements are ANDed.
                          items:
                            properties:
                              key:
                                description: key is the label key that the selector
                                  applies to.
                                type: string
                              operator:
                                description: operator represents a key's relationship
                                  to a set of values. Valid operators are In, NotIn,
                                  Exists and DoesNotExist.
                                type: string
                              values:
                                description: values is an array of string values.
                                  If the operator is In or NotIn, the values array
                                  must be non-empty. If the operator is Exists or
                                  DoesNotExist, the values array must be empty. This
                                  array is replaced during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                            type: object
                          type: array
                        matchLabels:
                          description: matchLabels is a map of {key,value} pairs.
                            A single {key,value} in the matchLabels map is equivalent
                            to an element of matchExpressions, whose key field is
                            "key", the operator is "In", and the values array contains
                            only "value". The requirements are ANDed.
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                      type: object
                  type: object
                type: array
              serviceAccountName:
                description: ServiceAccountName is the name of the ServiceAccount
                  to use to run this source. Defaults to default if not set.
                type: string
              sink:
                description: Sink is a reference to an object that will resolve to
                  a uri to use as the sink.
                properties:
                  ref:
                    description: Ref points to an Addressable.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          This is optional field, it gets defaulted to the object
                          holding it if left out.'
                        type: string
                    type: object
                  uri:
                    description: URI can be an absolute URL(non-empty scheme and non-empty
                      host) pointing to the target or a relative URI. Relative URIs
                      will be resolved using the base URI retrieved from Ref.
                    type: string
                type: object
            required:
            - resources
            type: object
          status:
            description: ApiServerSourceStatus defines the observed state of ApiServerSource
              (from the controller).
            properties:
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              ceAttributes:
                description: CloudEventAttributes are the specific attributes that
                  the Source uses as part of its CloudEvents.
                items:
                  properties:
                    source:
                      description: Source is the CloudEvents source attribute.
                      type: string
                    type:
                      description: Type refers to the CloudEvent type attribute.
                      type: string
                  type: object
                type: array
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  required:
                  - type
                  - status
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the "Generation" of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
              sinkUri:
                description: SinkURI is the current active sink URI that has been
                  configured for the Source.
                type: string
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.sinkUri
      name: Sink
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: ApiServerSource is an event source that brings Kubernetes API
          server events into Knative.
        properties:
          spec:
            description: ApiServerSourceSpec defines the desired state of ApiServerSource
              (from the client).
            properties:
              ceOverrides:
                description: CloudEventOverrides defines overrides to control the
                  output format and modifications of the event sent to the sink.
                properties:
                  extensions:
                    additionalProperties:
                      type: string
                    description: Extensions specify what attribute are added or overridden
                      on the outbound event. Each `Extensions` key-value pair are
                      set on the event as an attribute extension independently.
                    type: object
                type: object
              mode:
                description: EventMode controls the format of the event. `Reference`
                  sends a dataref event type for the resource under watch. `Resource`
                  send the full resource lifecycle event. Defaults to `Reference`
                type: string
              owner:
                description: ResourceOwner is an additional filter to only track resources
                  that are owned by a specific resource type. If ResourceOwner matches
                  Resources[n] then Resources[n] is allowed to pass the ResourceOwner
                  filter.
                properties:
                  apiVersion:
                    description: APIVersion - the API version of the resource to watch.
                    type: string
                  kind:
                    description: 'Kind of the resource to watch. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                type: object
              resources:
                description: Resource are the resources this source will track and
                  send related lifecycle events from the Kubernetes ApiServer, with
                  an optional label selector to help filter.
                items:
                  properties:
                    apiVersion:
                      description: APIVersion - the API version of the resource to
                        watch.
                      type: string
                    kind:
                      description: 'Kind of the resource to watch. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    selector:
                      description: 'LabelSelector filters this source to objects to
                        those resources pass the label selector. More info: http://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors'
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector
                            requirements. The requirements are ANDed.
                          items:
                            properties:
                              key:
                                description: key is the label key that the selector
                                  applies to.
                                type: string
                              operator:
                                description: operator represents a key's relationship
                                  to a set of values. Valid operators are In, NotIn,
                                  Exists and DoesNotExist.
                                type: string
                              values:
                                description: values is an array of string values.
                                  If the operator is In or NotIn, the values array
                                  must be non-empty. If the operator is Exists or
                                  DoesNotExist, the values array must be empty. This
                                  array is replaced during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                            type: object
                          type: array
                        matchLabels:
                          description: matchLabels is a map of {key,value} pairs.
                            A single {key,value} in the matchLabels map is equivalent
                            to an element of matchExpressions, whose key field is
                            "key", the operator is "In", and the values array contains
                            only "value". The requirements are ANDed.
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                      type: object
                  type: object
                type: array
              serviceAccountName:
                description: ServiceAccountName is the name of the ServiceAccount
                  to use to run this source. Defaults to default if not set.
                type: string
              sink:
                description: Sink is a reference to an object that will resolve to
                  a uri to use as the sink.
                properties:
                  ref:
                    description: Ref points to an Addressable.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          This is optional field, it gets defaulted to the object
                          holding it if left out.'
                        type: string
                    type: object
                  uri:
                    description: URI can be an absolute URL(non-empty scheme and non-empty
                      host) pointing to the target or a relative URI. Relative URIs
                      will be resolved using the base URI retrieved from Ref.
                    type: string
                type: object
            required:
            - resources
            type: object
          status:
            description: ApiServerSourceStatus defines the observed state of ApiServerSource
              (from the controller).
            properties:
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              ceAttributes:
                description: CloudEventAttributes are the specific attributes that
                  the Source uses as part of its CloudEvents.
                items:
                  properties:
                    source:
                      description: Source is the CloudEvents source attribute.
                      type: string
                    type:
                      description: Type refers to the CloudEvent type attribute.
                      type: string
                  type: object
                type: array
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  required:
                  - type
                  - status
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the "Generation" of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
              sinkUri:
                description: SinkURI is the current active sink URI that has been
                  configured for the Source.
                type: string
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.sinkUri
      name: Sink
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        description: ApiServerSource is an event source that brings Kubernetes API
          server events into Knative.
        properties:
          spec:
            description: ApiServerSourceSpec defines the desired state of ApiServerSource
              (from the client).
            properties:
              ceOverrides:
                description: CloudEventOverrides defines overrides to control the
                  output format and modifications of the event sent to the sink.
                properties:
                  extensions:
                    additionalProperties:
                      type: string
                    description: Extensions specify what attribute are added or overridden
                      on the outbound event. Each `Extensions` key-value pair are
                      set on the event as an attribute extension independently.
                    type: object
                type: object
              mode:
                description: EventMode controls the format of the event. `Reference`
                  sends a dataref event type for the resource under watch. `Resource`
                  send the full resource lifecycle event. Defaults to `Reference`
                type: string
              owner:
                description: ResourceOwner is an additional filter to only track resources
                  that are owned by a specific resource type. If ResourceOwner matches
                  Resources[n] then Resources[n] is allowed to pass the ResourceOwner
                  filter.
                properties:
                  apiVersion:
                    description: APIVersion - the API version of the resource to watch.
                    type: string
                  kind:
                    description: 'Kind of the resource to watch. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                type: object
              resources:
                description: Resource are the resources this source will track and
                  send related lifecycle events from the Kubernetes ApiServer, with
                  an optional label selector to help filter.
                items:
                  properties:
                    apiVersion:
                      description: APIVersion - the API version of the resource to
                        watch.
                      type: string
                    kind:
                      description: 'Kind of the resource to watch. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    selector:
                      description: 'LabelSelector filters this source to objects to
                        those resources pass the label selector. More info: http://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors'
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector
                            requirements. The requirements are ANDed.
                          items:
                            properties:
                              key:
                                description: key is the label key that the selector
                                  applies to.
                                type: string
                              operator:
                                description: operator represents a key's relationship
                                  to a set of values. Valid operators are In, NotIn,
                                  Exists and DoesNotExist.
                                type: string
                              values:
                                description: values is an array of string values.
                                  If the operator is In or NotIn, the values array
                                  must be non-empty. If the operator is Exists or
                                  DoesNotExist, the values array must be empty. This
                                  array is replaced during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                            type: object
                          type: array
                        matchLabels:
                          description: matchLabels is a map of {key,value} pairs.
                            A single {key,value} in the matchLabels map is equivalent
                            to an element of matchExpressions, whose key field is
                            "key", the operator is "In", and the values array contains
                            only "value". The requirements are ANDed.
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                      type: object
                  type: object
                type: array
              serviceAccountName:
                description: ServiceAccountName is the name of the ServiceAccount
                  to use to run this source. Defaults to default if not set.
                type: string
              sink:
                description: Sink is a reference to an object that will resolve to
                  a uri to use as the sink.
                properties:
                  ref:
                    description: Ref points to an Addressable.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          This is optional field, it gets defaulted to the object
                          holding it if left out.'
                        type: string
                    type: object
                  uri:
                    description: URI can be an absolute URL(non-empty scheme and non-empty
                      host) pointing to the target or a relative URI. Relative URIs
                      will be resolved using the base URI retrieved from Ref.
                    type: string
                type: object
            required:
            - resources
            type: object
          status:
            description: ApiServerSourceStatus defines the observed state of ApiServerSource
              (from the controller).
            properties:
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              ceAttributes:
                description: CloudEventAttributes are the specific attributes that
                  the Source uses as part of its CloudEvents.
                items:
                  properties:
                    source:
                      description: Source is the CloudEvents source attribute.
                      type: string
                    type:
                      description: Type refers to the CloudEvent type attribute.
                      type: string
                  type: object
                type: array
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  required:
                  - type
                  - status
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the "Generation" of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
              sinkUri:
                description: SinkURI is the current active sink URI that has been
                  configured for the Source.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    duck.knative.dev/addressable: "true"
    eventing.knative.dev/release: v0.22.1
    knative.dev/crd-install: "true"
    kustomize.component: knative
  name: brokers.eventing.knative.dev
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: eventing-webhook
          namespace: knative-eventing
      conversionReviewVersions:
      - v1
      - v1beta1
  group: eventing.knative.dev
  names:
    categories:
    - all
    - knative
    - eventing
    kind: Broker
    plural: brokers
    singular: broker
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.address.url
      name: URL
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: Broker collects a pool of events that are consumable using Triggers.
          Brokers provide a well-known endpoint for event delivery that senders can
          use with minimal knowledge of the event routing strategy. Subscribers use
          Triggers to request delivery of events from a Broker's pool to a specific
          URL or Addressable endpoint.
        properties:
          spec:
            description: Spec defines the desired state of the Broker.
            properties:
              config:
                description: Config is a KReference to the configuration that specifies
                  configuration options for this Broker. For example, this could be
                  a pointer to a ConfigMap.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                      This is optional field, it gets defaulted to the object holding
                      it if left out.'
                    type: string
                type: object
              delivery:
                description: Delivery contains the delivery spec for each trigger
                  to this Broker. Each trigger delivery spec, if any, overrides this
                  global delivery spec.
                properties:
                  backoffDelay:
                    description: 'BackoffDelay is the delay before retrying. More
                      information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html
                      - https://en.wikipedia.org/wiki/ISO_8601  For linear policy,
                      backoff delay is backoffDelay*<numberOfRetries>. For exponential
                      policy, backoff delay is backoffDelay*2^<numberOfRetries>.'
                    type: string
                  backoffPolicy:
                    description: BackoffPolicy is the retry backoff policy (linear,
                      exponential).
                    type: string
                  deadLetterSink:
                    description: DeadLetterSink is the sink receiving event that could
                      not be sent to a destination.
                    properties:
                      ref:
                        description: Ref points to an Addressable.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                              This is optional field, it gets defaulted to the object
                              holding it if left out.'
                            type: string
                        type: object
                      uri:
                        description: URI can be an absolute URL(non-empty scheme and
                          non-empty host) pointing to the target or a relative URI.
                          Relative URIs will be resolved using the base URI retrieved
                          from Ref.
                        type: string
                    type: object
                  retry:
                    description: Retry is the minimum number of retries the sender
                      should attempt when sending an event before moving it to the
                      dead letter sink.
                    format: int32
                    type: integer
                type: object
            type: object
          status:
            description: Status represents the current state of the Broker. This data
              may be out of date.
            properties:
              address:
                description: Broker is Addressable. It exposes the endpoint as an
                  URI to get events delivered into the Broker mesh.
                properties:
                  url:
                    type: string
                type: object
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  required:
                  - type
                  - status
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the 'Generation' of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.address.url
      name: URL
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        description: Broker collects a pool of events that are consumable using Triggers.
          Brokers provide a well-known endpoint for event delivery that senders can
          use with minimal knowledge of the event routing strategy. Subscribers use
          Triggers to request delivery of events from a Broker's pool to a specific
          URL or Addressable endpoint.
        properties:
          spec:
            description: Spec defines the desired state of the Broker.
            properties:
              config:
                description: Config is a KReference to the configuration that specifies
                  configuration options for this Broker. For example, this could be
                  a pointer to a ConfigMap.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                      This is optional field, it gets defaulted to the object holding
                      it if left out.'
                    type: string
                type: object
              delivery:
                description: Delivery contains the delivery spec for each trigger
                  to this Broker. Each trigger delivery spec, if any, overrides this
                  global delivery spec.
                properties:
                  backoffDelay:
                    description: 'BackoffDelay is the delay before retrying. More
                      information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html
                      - https://en.wikipedia.org/wiki/ISO_8601  For linear policy,
                      backoff delay is backoffDelay*<numberOfRetries>. For exponential
                      policy, backoff delay is backoffDelay*2^<numberOfRetries>.'
                    type: string
                  backoffPolicy:
                    description: BackoffPolicy is the retry backoff policy (linear,
                      exponential).
                    type: string
                  deadLetterSink:
                    description: DeadLetterSink is the sink receiving event that could
                      not be sent to a destination.
                    properties:
                      ref:
                        description: Ref points to an Addressable.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                              This is optional field, it gets defaulted to the object
                              holding it if left out.'
                            type: string
                        type: object
                      uri:
                        description: URI can be an absolute URL(non-empty scheme and
                          non-empty host) pointing to the target or a relative URI.
                          Relative URIs will be resolved using the base URI retrieved
                          from Ref.
                        type: string
                    type: object
                  retry:
                    description: Retry is the minimum number of retries the sender
                      should attempt when sending an event before moving it to the
                      dead letter sink.
                    format: int32
                    type: integer
                type: object
            type: object
          status:
            description: Status represents the current state of the Broker. This data
              may be out of date.
            properties:
              address:
                description: Broker is Addressable. It exposes the endpoint as an
                  URI to get events delivered into the Broker mesh.
                properties:
                  url:
                    type: string
                type: object
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  required:
                  - type
                  - status
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the 'Generation' of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  labels:
    knative.dev/crd-install: "true"
    serving.knative.dev/release: v0.22.1
  name: certificates.networking.internal.knative.dev
spec:
  group: networking.internal.knative.dev
  names:
    categories:
    - knative-internal
    - networking
    kind: Certificate
    plural: certificates
    shortNames:
    - kcert
    singular: certificate
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        type: object
        x-kubernetes-preserve-unknown-fields: true
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    duck.knative.dev/addressable: "true"
    eventing.knative.dev/release: v0.22.1
    knative.dev/crd-install: "true"
    kustomize.component: knative
    messaging.knative.dev/subscribable: "true"
  name: channels.messaging.knative.dev
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: eventing-webhook
          namespace: knative-eventing
      conversionReviewVersions:
      - v1
      - v1beta1
  group: messaging.knative.dev
  names:
    categories:
    - all
    - knative
    - messaging
    - channel
    kind: Channel
    plural: channels
    shortNames:
    - ch
    singular: channel
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.address.url
      name: URL
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        properties:
          spec:
            description: Spec defines the desired state of the Channel.
            properties:
              channelTemplate:
                description: ChannelTemplate specifies which Channel CRD to use to
                  create the CRD Channel backing this Channel. This is immutable after
                  creation. Normally this is set by the Channel defaulter, not directly
                  by the user.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  spec:
                    description: Spec defines the Spec to use for each channel created.
                      Passed in verbatim to the Channel CRD as Spec section.
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                type: object
              delivery:
                description: DeliverySpec contains options controlling the event delivery
                properties:
                  backoffDelay:
                    description: 'BackoffDelay is the delay before retrying. More
                      information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html
                      - https://en.wikipedia.org/wiki/ISO_8601  For linear policy,
                      backoff delay is backoffDelay*<numberOfRetries>. For exponential
                      policy, backoff delay is backoffDelay*2^<numberOfRetries>.'
                    type: string
                  backoffPolicy:
                    description: BackoffPolicy is the retry backoff policy (linear,
                      exponential).
                    type: string
                  deadLetterSink:
                    description: DeadLetterSink is the sink receiving event that could
                      not be sent to a destination.
                    properties:
                      ref:
                        description: Ref points to an Addressable.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                              This is optional field, it gets defaulted to the object
                              holding it if left out.'
                            type: string
                        type: object
                      uri:
                        description: URI can be an absolute URL(non-empty scheme and
                          non-empty host) pointing to the target or a relative URI.
                          Relative URIs will be resolved using the base URI retrieved
                          from Ref.
                        type: string
                    type: object
                  retry:
                    description: Retry is the minimum number of retries the sender
                      should attempt when sending an event before moving it to the
                      dead letter sink.
                    format: int32
                    type: integer
                type: object
              subscribers:
                description: This is the list of subscriptions for this subscribable.
                items:
                  properties:
                    delivery:
                      description: DeliverySpec contains options controlling the event
                        delivery
                      properties:
                        backoffDelay:
                          description: 'BackoffDelay is the delay before retrying.
                            More information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html
                            - https://en.wikipedia.org/wiki/ISO_8601  For linear policy,
                            backoff delay is backoffDelay*<numberOfRetries>. For exponential
                            policy, backoff delay is backoffDelay*2^<numberOfRetries>.'
                          type: string
                        backoffPolicy:
                          description: BackoffPolicy is the retry backoff policy (linear,
                            exponential).
                          type: string
                        deadLetterSink:
                          description: DeadLetterSink is the sink receiving event
                            that could not be sent to a destination.
                          properties:
                            ref:
                              description: Ref points to an Addressable.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info:
                                    https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                                    This is optional field, it gets defaulted to the
                                    object holding it if left out.'
                                  type: string
                              type: object
                            uri:
                              description: URI can be an absolute URL(non-empty scheme
                                and non-empty host) pointing to the target or a relative
                                URI. Relative URIs will be resolved using the base
                                URI retrieved from Ref.
                              type: string
                          type: object
                        retry:
                          description: Retry is the minimum number of retries the
                            sender should attempt when sending an event before moving
                            it to the dead letter sink.
                          format: int32
                          type: integer
                      type: object
                    generation:
                      description: Generation of the origin of the subscriber with
                        uid:UID.
                      format: int64
                      type: integer
                    replyUri:
                      description: ReplyURI is the endpoint for the reply
                      type: string
                    subscriberUri:
                      description: SubscriberURI is the endpoint for the subscriber
                      type: string
                    uid:
                      description: UID is used to understand the origin of the subscriber.
                      type: string
                  type: object
                type: array
            type: object
          status:
            description: Status represents the current state of the Channel. This
              data may be out of date.
            properties:
              address:
                properties:
                  url:
                    type: string
                type: object
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              channel:
                description: Channel is an KReference to the Channel CRD backing this
                  Channel.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                      This is optional field, it gets defaulted to the object holding
                      it if left out.'
                    type: string
                type: object
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                type: array
              deadLetterChannel:
                description: DeadLetterChannel is a KReference and is set by the channel
                  when it supports native error handling via a channel Failed messages
                  are delivered here.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                      This is optional field, it gets defaulted to the object holding
                      it if left out.'
                    type: string
                type: object
              observedGeneration:
                description: ObservedGeneration is the 'Generation' of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
              subscribers:
                description: This is the list of subscription's statuses for this
                  channel.
                items:
                  properties:
                    message:
                      description: A human readable message indicating details of
                        Ready status.
                      type: string
                    observedGeneration:
                      description: Generation of the origin of the subscriber with
                        uid:UID.
                      format: int64
                      type: integer
                    ready:
                      description: Status of the subscriber.
                      type: string
                    uid:
                      description: UID is used to understand the origin of the subscriber.
                      type: string
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.address.url
      name: URL
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        properties:
          spec:
            description: Spec defines the desired state of the Channel.
            properties:
              channelTemplate:
                description: ChannelTemplate specifies which Channel CRD to use to
                  create the CRD Channel backing this Channel. This is immutable after
                  creation. Normally this is set by the Channel defaulter, not directly
                  by the user.
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  spec:
                    description: Spec defines the Spec to use for each channel created.
                      Passed in verbatim to the Channel CRD as Spec section.
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                type: object
              delivery:
                description: DeliverySpec contains options controlling the event delivery
                properties:
                  backoffDelay:
                    description: 'BackoffDelay is the delay before retrying. More
                      information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html
                      - https://en.wikipedia.org/wiki/ISO_8601  For linear policy,
                      backoff delay is backoffDelay*<numberOfRetries>. For exponential
                      policy, backoff delay is backoffDelay*2^<numberOfRetries>.'
                    type: string
                  backoffPolicy:
                    description: BackoffPolicy is the retry backoff policy (linear,
                      exponential).
                    type: string
                  deadLetterSink:
                    description: DeadLetterSink is the sink receiving event that could
                      not be sent to a destination.
                    properties:
                      ref:
                        description: Ref points to an Addressable.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                              This is optional field, it gets defaulted to the object
                              holding it if left out.'
                            type: string
                        type: object
                      uri:
                        description: URI can be an absolute URL(non-empty scheme and
                          non-empty host) pointing to the target or a relative URI.
                          Relative URIs will be resolved using the base URI retrieved
                          from Ref.
                        type: string
                    type: object
                  retry:
                    description: Retry is the minimum number of retries the sender
                      should attempt when sending an event before moving it to the
                      dead letter sink.
                    format: int32
                    type: integer
                type: object
              subscribers:
                description: This is the list of subscriptions for this subscribable.
                items:
                  properties:
                    delivery:
                      description: DeliverySpec contains options controlling the event
                        delivery
                      properties:
                        backoffDelay:
                          description: 'BackoffDelay is the delay before retrying.
                            More information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html
                            - https://en.wikipedia.org/wiki/ISO_8601  For linear policy,
                            backoff delay is backoffDelay*<numberOfRetries>. For exponential
                            policy, backoff delay is backoffDelay*2^<numberOfRetries>.'
                          type: string
                        backoffPolicy:
                          description: BackoffPolicy is the retry backoff policy (linear,
                            exponential).
                          type: string
                        deadLetterSink:
                          description: DeadLetterSink is the sink receiving event
                            that could not be sent to a destination.
                          properties:
                            ref:
                              description: Ref points to an Addressable.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info:
                                    https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                                    This is optional field, it gets defaulted to the
                                    object holding it if left out.'
                                  type: string
                              type: object
                            uri:
                              description: URI can be an absolute URL(non-empty scheme
                                and non-empty host) pointing to the target or a relative
                                URI. Relative URIs will be resolved using the base
                                URI retrieved from Ref.
                              type: string
                          type: object
                        retry:
                          description: Retry is the minimum number of retries the
                            sender should attempt when sending an event before moving
                            it to the dead letter sink.
                          format: int32
                          type: integer
                      type: object
                    generation:
                      description: Generation of the origin of the subscriber with
                        uid:UID.
                      format: int64
                      type: integer
                    replyUri:
                      description: ReplyURI is the endpoint for the reply
                      type: string
                    subscriberUri:
                      description: SubscriberURI is the endpoint for the subscriber
                      type: string
                    uid:
                      description: UID is used to understand the origin of the subscriber.
                      type: string
                  type: object
                type: array
            type: object
          status:
            description: Status represents the current state of the Channel. This
              data may be out of date.
            properties:
              address:
                properties:
                  url:
                    type: string
                type: object
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              channel:
                description: Channel is an KReference to the Channel CRD backing this
                  Channel.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                      This is optional field, it gets defaulted to the object holding
                      it if left out.'
                    type: string
                type: object
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                type: array
              deadLetterChannel:
                description: DeadLetterChannel is a KReference and is set by the channel
                  when it supports native error handling via a channel Failed messages
                  are delivered here.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                      This is optional field, it gets defaulted to the object holding
                      it if left out.'
                    type: string
                type: object
              observedGeneration:
                description: ObservedGeneration is the 'Generation' of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
              subscribers:
                description: This is the list of subscription's statuses for this
                  channel.
                items:
                  properties:
                    message:
                      description: A human readable message indicating details of
                        Ready status.
                      type: string
                    observedGeneration:
                      description: Generation of the origin of the subscriber with
                        uid:UID.
                      format: int64
                      type: integer
                    ready:
                      description: Status of the subscriber.
                      type: string
                    uid:
                      description: UID is used to understand the origin of the subscriber.
                      type: string
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  labels:
    duck.knative.dev/podspecable: "true"
    knative.dev/crd-install: "true"
    serving.knative.dev/release: v0.22.1
  name: configurations.serving.knative.dev
spec:
  group: serving.knative.dev
  names:
    categories:
    - all
    - knative
    - serving
    kind: Configuration
    plural: configurations
    shortNames:
    - config
    - cfg
    singular: configuration
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.latestCreatedRevisionName
      name: LatestCreated
      type: string
    - jsonPath: .status.latestReadyRevisionName
      name: LatestReady
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Reason
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        type: object
        x-kubernetes-preserve-unknown-fields: true
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    duck.knative.dev/source: "true"
    eventing.knative.dev/release: v0.22.1
    eventing.knative.dev/source: "true"
    knative.dev/crd-install: "true"
    kustomize.component: knative
  name: containersources.sources.knative.dev
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: eventing-webhook
          namespace: knative-eventing
      conversionReviewVersions:
      - v1
      - v1beta1
  group: sources.knative.dev
  names:
    categories:
    - all
    - knative
    - sources
    kind: ContainerSource
    plural: containersources
    singular: containersource
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.sinkUri
      name: Sink
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Reason
      type: string
    name: v1alpha2
    schema:
      openAPIV3Schema:
        description: ContainerSource is an event source that starts a container image
          which generates events under certain situations and sends messages to a
          sink URI
        properties:
          spec:
            description: ContainerSourceSpec defines the desired state of ContainerSource
              (from the client).
            properties:
              ceOverrides:
                description: CloudEventOverrides defines overrides to control the
                  output format and modifications of the event sent to the sink.
                properties:
                  extensions:
                    description: Extensions specify what attribute are added or overridden
                      on the outbound event. Each `Extensions` key-value pair are
                      set on the event as an attribute extension independently.
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                type: object
              sink:
                description: Sink is a reference to an object that will resolve to
                  a uri to use as the sink.
                properties:
                  ref:
                    description: Ref points to an Addressable.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          This is optional field, it gets defaulted to the object
                          holding it if left out.'
                        type: string
                    type: object
                  uri:
                    description: URI can be an absolute URL(non-empty scheme and non-empty
                      host) pointing to the target or a relative URI. Relative URIs
                      will be resolved using the base URI retrieved from Ref.
                    type: string
                type: object
              template:
                description: Template describes the pods that will be created
                properties:
                  annotations:
                    description: 'Annotations is an unstructured key value map stored
                      with a resource that may be set by external tools to store and
                      retrieve arbitrary metadata. They are not queryable and should
                      be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                  clusterName:
                    description: The name of the cluster which the object belongs
                      to. This is used to distinguish resources with same name and
                      namespace in different clusters. This field is not set anywhere
                      right now and apiserver is going to ignore it if set in create
                      or update request.
                    type: string
                  creationTimestamp:
                    description: 'CreationTimestamp is a timestamp representing the
                      server time when this object was created. It is not guaranteed
                      to be set in happens-before order across separate operations.
                      Clients may not set this value. It is represented in RFC3339
                      form and is in UTC.  Populated by the system. Read-only. Null
                      for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    type: string
                  deletionGracePeriodSeconds:
                    description: Number of seconds allowed for this object to gracefully
                      terminate before it will be removed from the system. Only set
                      when deletionTimestamp is also set. May only be shortened. Read-only.
                    format: int64
                    type: integer
                  deletionTimestamp:
                    description: 'DeletionTimestamp is RFC 3339 date and time at which
                      this resource will be deleted. This field is set by the server
                      when a graceful deletion is requested by the user, and is not
                      directly settable by a client. The resource is expected to be
                      deleted (no longer visible from resource lists, and not reachable
                      by name) after the time in this field, once the finalizers list
                      is empty. As long as the finalizers list contains items, deletion
                      is blocked. Once the deletionTimestamp is set, this value may
                      not be unset or be set further into the future, although it
                      may be shortened or the resource may be deleted prior to this
                      time. For example, a user may request that a pod is deleted
                      in 30 seconds. The Kubelet will react by sending a graceful
                      termination signal to the containers in the pod. After that
                      30 seconds, the Kubelet will send a hard termination signal
                      (SIGKILL) to the container and after cleanup, remove the pod
                      from the API. In the presence of network partitions, this object
                      may still exist after this timestamp, until an administrator
                      or automated process can determine the resource is fully terminated.
                      If not set, graceful deletion of the object has not been requested.  Populated
                      by the system when a graceful deletion is requested. Read-only.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    type: string
                  finalizers:
                    description: Must be empty before the object is deleted from the
                      registry. Each entry is an identifier for the responsible component
                      that will remove the entry from the list. If the deletionTimestamp
                      of the object is non-nil, entries in this list can only be removed.
                      Finalizers may be processed and removed in any order.  Order
                      is NOT enforced because it introduces significant risk of stuck
                      finalizers. finalizers is a shared field, any actor with permission
                      can reorder it. If the finalizer list is processed in order,
                      then this can lead to a situation in which the component responsible
                      for the first finalizer in the list is waiting for a signal
                      (field value, external system, or other) produced by a component
                      responsible for a finalizer later in the list, resulting in
                      a deadlock. Without enforced ordering finalizers are free to
                      order amongst themselves and are not vulnerable to ordering
                      changes in the list.
                    items:
                      type: string
                    type: array
                  generateName:
                    description: 'GenerateName is an optional prefix, used by the
                      server, to generate a unique name ONLY IF the Name field has
                      not been provided. If this field is used, the name returned
                      to the client will be different than the name passed. This value
                      will also be combined with a unique suffix. The provided value
                      has the same validation rules as the Name field, and may be
                      truncated by the length of the suffix required to make the value
                      unique on the server.  If this field is specified and the generated
                      name exists, the server will NOT return a 409 - instead, it
                      will either return 201 Created or 500 with Reason ServerTimeout
                      indicating a unique name could not be found in the time allotted,
                      and the client should retry (optionally after the time indicated
                      in the Retry-After header).  Applied only if Name is not specified.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency'
                    type: string
                  generation:
                    description: A sequence number representing a specific generation
                      of the desired state. Populated by the system. Read-only.
                    format: int64
                    type: integer
                  labels:
                    description: 'Map of string keys and values that can be used to
                      organize and categorize (scope and select) objects. May match
                      selectors of replication controllers and services. More info:
                      http://kubernetes.io/docs/user-guide/labels'
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                  managedFields:
                    description: 'ManagedFields maps workflow-id and version to the
                      set of fields that are managed by that workflow. This is mostly
                      for internal housekeeping, and users typically shouldn''t need
                      to set or understand this field. A workflow can be the user''s
                      name, a controller''s name, or the name of a specific apply
                      path like "ci-cd". The set of fields is always in the version
                      that the workflow used when modifying the object. '
                    items:
                      properties:
                        apiVersion:
                          description: APIVersion defines the version of this resource
                            that this field set applies to. The format is "group/version"
                            just like the top-level APIVersion field. It is necessary
                            to track the version of a field set because it cannot
                            be automatically converted.
                          type: string
                        fieldsType:
                          description: 'FieldsType is the discriminator for the different
                            fields format and version. There is currently only one
                            possible value: "FieldsV1"'
                          type: string
                        fieldsV1:
                          description: FieldsV1 holds the first JSON version format
                            as described in the "FieldsV1" type.
                          type: string
                        manager:
                          description: Manager is an identifier of the workflow managing
                            these fields.
                          type: string
                        operation:
                          description: Operation is the type of operation which lead
                            to this ManagedFieldsEntry being created. The only valid
                            values for this field are "Apply" and "Update".
                          type: string
                        time:
                          description: Time is timestamp of when these fields were
                            set. It should always be empty if Operation is "Apply"
                          type: string
                      type: object
                    type: array
                  name:
                    description: 'Name must be unique within a namespace. Is required
                      when creating resources, although some resources may allow a
                      client to request the generation of an appropriate name automatically.
                      Name is primarily intended for creation idempotence and configuration
                      definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                    type: string
                  namespace:
                    description: 'Namespace defines the space within each name must
                      be unique. An empty namespace is equivalent to the "default"
                      namespace, but "default" is the canonical representation. Not
                      all objects are required to be scoped to a namespace - the value
                      of this field for those objects will be empty.  Must be a DNS_LABEL.
                      Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces'
                    type: string
                  ownerReferences:
                    description: List of objects depended by this object. If ALL objects
                      in the list have been deleted, this object will be garbage collected.
                      If this object is managed by a controller, then an entry in
                      this list will point to this controller, with the controller
                      field set to true. There cannot be more than one managing controller.
                    items:
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        blockOwnerDeletion:
                          description: If true, AND if the owner has the "foregroundDeletion"
                            finalizer, then the owner cannot be deleted from the key-value
                            store until this reference is removed. Defaults to false.
                            To set this field, a user needs "delete" permission of
                            the owner, otherwise 422 (Unprocessable Entity) will be
                            returned.
                          type: boolean
                        controller:
                          description: If true, this reference points to the managing
                            controller.
                          type: boolean
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                          type: string
                      type: object
                    type: array
                  resourceVersion:
                    description: 'An opaque value that represents the internal version
                      of this object that can be used by clients to determine when
                      objects have changed. May be used for optimistic concurrency,
                      change detection, and the watch operation on a resource or set
                      of resources. Clients must treat these values as opaque and
                      passed unmodified back to the server. They may only be valid
                      for a particular resource or set of resources.  Populated by
                      the system. Read-only. Value must be treated as opaque by clients
                      and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  selfLink:
                    description: SelfLink is a URL representing this object. Populated
                      by the system. Read-only.  DEPRECATED Kubernetes will stop propagating
                      this field in 1.20 release and the field is planned to be removed
                      in 1.21 release.
                    type: string
                  spec:
                    description: 'Specification of the desired behavior of the pod.
                      More info: Type ''kubectl explain pod.spec''. Also, https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                  uid:
                    description: 'UID is the unique in time and space value for this
                      object. It is typically generated by the server on successful
                      creation of a resource and is not allowed to change on PUT operations.  Populated
                      by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                    type: string
                type: object
            type: object
          status:
            description: ContainerSourceStatus defines the observed state of ContainerSource
              (from the controller).
            properties:
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              ceAttributes:
                description: CloudEventAttributes are the specific attributes that
                  the Source uses as part of its CloudEvents.
                items:
                  properties:
                    source:
                      description: Source is the CloudEvents source attribute.
                      type: string
                    type:
                      description: Type refers to the CloudEvent type attribute.
                      type: string
                  type: object
                type: array
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  required:
                  - type
                  - status
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the "Generation" of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
              sinkUri:
                description: SinkURI is the current active sink URI that has been
                  configured for the Source.
                type: string
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.sinkUri
      name: Sink
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Reason
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: ContainerSource is an event source that starts a container image
          which generates events under certain situations and sends messages to a
          sink URI
        properties:
          spec:
            description: ContainerSourceSpec defines the desired state of ContainerSource
              (from the client).
            properties:
              ceOverrides:
                description: CloudEventOverrides defines overrides to control the
                  output format and modifications of the event sent to the sink.
                properties:
                  extensions:
                    description: Extensions specify what attribute are added or overridden
                      on the outbound event. Each `Extensions` key-value pair are
                      set on the event as an attribute extension independently.
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                type: object
              sink:
                description: Sink is a reference to an object that will resolve to
                  a uri to use as the sink.
                properties:
                  ref:
                    description: Ref points to an Addressable.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          This is optional field, it gets defaulted to the object
                          holding it if left out.'
                        type: string
                    type: object
                  uri:
                    description: URI can be an absolute URL(non-empty scheme and non-empty
                      host) pointing to the target or a relative URI. Relative URIs
                      will be resolved using the base URI retrieved from Ref.
                    type: string
                type: object
              template:
                description: Template describes the pods that will be created
                properties:
                  annotations:
                    description: 'Annotations is an unstructured key value map stored
                      with a resource that may be set by external tools to store and
                      retrieve arbitrary metadata. They are not queryable and should
                      be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                  clusterName:
                    description: The name of the cluster which the object belongs
                      to. This is used to distinguish resources with same name and
                      namespace in different clusters. This field is not set anywhere
                      right now and apiserver is going to ignore it if set in create
                      or update request.
                    type: string
                  creationTimestamp:
                    description: 'CreationTimestamp is a timestamp representing the
                      server time when this object was created. It is not guaranteed
                      to be set in happens-before order across separate operations.
                      Clients may not set this value. It is represented in RFC3339
                      form and is in UTC.  Populated by the system. Read-only. Null
                      for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    type: string
                  deletionGracePeriodSeconds:
                    description: Number of seconds allowed for this object to gracefully
                      terminate before it will be removed from the system. Only set
                      when deletionTimestamp is also set. May only be shortened. Read-only.
                    format: int64
                    type: integer
                  deletionTimestamp:
                    description: 'DeletionTimestamp is RFC 3339 date and time at which
                      this resource will be deleted. This field is set by the server
                      when a graceful deletion is requested by the user, and is not
                      directly settable by a client. The resource is expected to be
                      deleted (no longer visible from resource lists, and not reachable
                      by name) after the time in this field, once the finalizers list
                      is empty. As long as the finalizers list contains items, deletion
                      is blocked. Once the deletionTimestamp is set, this value may
                      not be unset or be set further into the future, although it
                      may be shortened or the resource may be deleted prior to this
                      time. For example, a user may request that a pod is deleted
                      in 30 seconds. The Kubelet will react by sending a graceful
                      termination signal to the containers in the pod. After that
                      30 seconds, the Kubelet will send a hard termination signal
                      (SIGKILL) to the container and after cleanup, remove the pod
                      from the API. In the presence of network partitions, this object
                      may still exist after this timestamp, until an administrator
                      or automated process can determine the resource is fully terminated.
                      If not set, graceful deletion of the object has not been requested.  Populated
                      by the system when a graceful deletion is requested. Read-only.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    type: string
                  finalizers:
                    description: Must be empty before the object is deleted from the
                      registry. Each entry is an identifier for the responsible component
                      that will remove the entry from the list. If the deletionTimestamp
                      of the object is non-nil, entries in this list can only be removed.
                      Finalizers may be processed and removed in any order.  Order
                      is NOT enforced because it introduces significant risk of stuck
                      finalizers. finalizers is a shared field, any actor with permission
                      can reorder it. If the finalizer list is processed in order,
                      then this can lead to a situation in which the component responsible
                      for the first finalizer in the list is waiting for a signal
                      (field value, external system, or other) produced by a component
                      responsible for a finalizer later in the list, resulting in
                      a deadlock. Without enforced ordering finalizers are free to
                      order amongst themselves and are not vulnerable to ordering
                      changes in the list.
                    items:
                      type: string
                    type: array
                  generateName:
                    description: 'GenerateName is an optional prefix, used by the
                      server, to generate a unique name ONLY IF the Name field has
                      not been provided. If this field is used, the name returned
                      to the client will be different than the name passed. This value
                      will also be combined with a unique suffix. The provided value
                      has the same validation rules as the Name field, and may be
                      truncated by the length of the suffix required to make the value
                      unique on the server.  If this field is specified and the generated
                      name exists, the server will NOT return a 409 - instead, it
                      will either return 201 Created or 500 with Reason ServerTimeout
                      indicating a unique name could not be found in the time allotted,
                      and the client should retry (optionally after the time indicated
                      in the Retry-After header).  Applied only if Name is not specified.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency'
                    type: string
                  generation:
                    description: A sequence number representing a specific generation
                      of the desired state. Populated by the system. Read-only.
                    format: int64
                    type: integer
                  labels:
                    description: 'Map of string keys and values that can be used to
                      organize and categorize (scope and select) objects. May match
                      selectors of replication controllers and services. More info:
                      http://kubernetes.io/docs/user-guide/labels'
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                  managedFields:
                    description: 'ManagedFields maps workflow-id and version to the
                      set of fields that are managed by that workflow. This is mostly
                      for internal housekeeping, and users typically shouldn''t need
                      to set or understand this field. A workflow can be the user''s
                      name, a controller''s name, or the name of a specific apply
                      path like "ci-cd". The set of fields is always in the version
                      that the workflow used when modifying the object. '
                    items:
                      properties:
                        apiVersion:
                          description: APIVersion defines the version of this resource
                            that this field set applies to. The format is "group/version"
                            just like the top-level APIVersion field. It is necessary
                            to track the version of a field set because it cannot
                            be automatically converted.
                          type: string
                        fieldsType:
                          description: 'FieldsType is the discriminator for the different
                            fields format and version. There is currently only one
                            possible value: "FieldsV1"'
                          type: string
                        fieldsV1:
                          description: FieldsV1 holds the first JSON version format
                            as described in the "FieldsV1" type.
                          type: string
                        manager:
                          description: Manager is an identifier of the workflow managing
                            these fields.
                          type: string
                        operation:
                          description: Operation is the type of operation which lead
                            to this ManagedFieldsEntry being created. The only valid
                            values for this field are "Apply" and "Update".
                          type: string
                        time:
                          description: Time is timestamp of when these fields were
                            set. It should always be empty if Operation is "Apply"
                          type: string
                      type: object
                    type: array
                  name:
                    description: 'Name must be unique within a namespace. Is required
                      when creating resources, although some resources may allow a
                      client to request the generation of an appropriate name automatically.
                      Name is primarily intended for creation idempotence and configuration
                      definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                    type: string
                  namespace:
                    description: 'Namespace defines the space within each name must
                      be unique. An empty namespace is equivalent to the "default"
                      namespace, but "default" is the canonical representation. Not
                      all objects are required to be scoped to a namespace - the value
                      of this field for those objects will be empty.  Must be a DNS_LABEL.
                      Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces'
                    type: string
                  ownerReferences:
                    description: List of objects depended by this object. If ALL objects
                      in the list have been deleted, this object will be garbage collected.
                      If this object is managed by a controller, then an entry in
                      this list will point to this controller, with the controller
                      field set to true. There cannot be more than one managing controller.
                    items:
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        blockOwnerDeletion:
                          description: If true, AND if the owner has the "foregroundDeletion"
                            finalizer, then the owner cannot be deleted from the key-value
                            store until this reference is removed. Defaults to false.
                            To set this field, a user needs "delete" permission of
                            the owner, otherwise 422 (Unprocessable Entity) will be
                            returned.
                          type: boolean
                        controller:
                          description: If true, this reference points to the managing
                            controller.
                          type: boolean
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                          type: string
                      type: object
                    type: array
                  resourceVersion:
                    description: 'An opaque value that represents the internal version
                      of this object that can be used by clients to determine when
                      objects have changed. May be used for optimistic concurrency,
                      change detection, and the watch operation on a resource or set
                      of resources. Clients must treat these values as opaque and
                      passed unmodified back to the server. They may only be valid
                      for a particular resource or set of resources.  Populated by
                      the system. Read-only. Value must be treated as opaque by clients
                      and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  selfLink:
                    description: SelfLink is a URL representing this object. Populated
                      by the system. Read-only.  DEPRECATED Kubernetes will stop propagating
                      this field in 1.20 release and the field is planned to be removed
                      in 1.21 release.
                    type: string
                  spec:
                    description: 'Specification of the desired behavior of the pod.
                      More info: Type ''kubectl explain pod.spec''. Also, https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                  uid:
                    description: 'UID is the unique in time and space value for this
                      object. It is typically generated by the server on successful
                      creation of a resource and is not allowed to change on PUT operations.  Populated
                      by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                    type: string
                type: object
            type: object
          status:
            description: ContainerSourceStatus defines the observed state of ContainerSource
              (from the controller).
            properties:
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              ceAttributes:
                description: CloudEventAttributes are the specific attributes that
                  the Source uses as part of its CloudEvents.
                items:
                  properties:
                    source:
                      description: Source is the CloudEvents source attribute.
                      type: string
                    type:
                      description: Type refers to the CloudEvent type attribute.
                      type: string
                  type: object
                type: array
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  required:
                  - type
                  - status
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the "Generation" of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
              sinkUri:
                description: SinkURI is the current active sink URI that has been
                  configured for the Source.
                type: string
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.sinkUri
      name: Sink
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Reason
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        description: ContainerSource is an event source that starts a container image
          which generates events under certain situations and sends messages to a
          sink URI
        properties:
          spec:
            description: ContainerSourceSpec defines the desired state of ContainerSource
              (from the client).
            properties:
              ceOverrides:
                description: CloudEventOverrides defines overrides to control the
                  output format and modifications of the event sent to the sink.
                properties:
                  extensions:
                    description: Extensions specify what attribute are added or overridden
                      on the outbound event. Each `Extensions` key-value pair are
                      set on the event as an attribute extension independently.
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                type: object
              sink:
                description: Sink is a reference to an object that will resolve to
                  a uri to use as the sink.
                properties:
                  ref:
                    description: Ref points to an Addressable.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          This is optional field, it gets defaulted to the object
                          holding it if left out.'
                        type: string
                    type: object
                  uri:
                    description: URI can be an absolute URL(non-empty scheme and non-empty
                      host) pointing to the target or a relative URI. Relative URIs
                      will be resolved using the base URI retrieved from Ref.
                    type: string
                type: object
              template:
                description: Template describes the pods that will be created
                properties:
                  annotations:
                    description: 'Annotations is an unstructured key value map stored
                      with a resource that may be set by external tools to store and
                      retrieve arbitrary metadata. They are not queryable and should
                      be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                  clusterName:
                    description: The name of the cluster which the object belongs
                      to. This is used to distinguish resources with same name and
                      namespace in different clusters. This field is not set anywhere
                      right now and apiserver is going to ignore it if set in create
                      or update request.
                    type: string
                  creationTimestamp:
                    description: 'CreationTimestamp is a timestamp representing the
                      server time when this object was created. It is not guaranteed
                      to be set in happens-before order across separate operations.
                      Clients may not set this value. It is represented in RFC3339
                      form and is in UTC.  Populated by the system. Read-only. Null
                      for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    type: string
                  deletionGracePeriodSeconds:
                    description: Number of seconds allowed for this object to gracefully
                      terminate before it will be removed from the system. Only set
                      when deletionTimestamp is also set. May only be shortened. Read-only.
                    format: int64
                    type: integer
                  deletionTimestamp:
                    description: 'DeletionTimestamp is RFC 3339 date and time at which
                      this resource will be deleted. This field is set by the server
                      when a graceful deletion is requested by the user, and is not
                      directly settable by a client. The resource is expected to be
                      deleted (no longer visible from resource lists, and not reachable
                      by name) after the time in this field, once the finalizers list
                      is empty. As long as the finalizers list contains items, deletion
                      is blocked. Once the deletionTimestamp is set, this value may
                      not be unset or be set further into the future, although it
                      may be shortened or the resource may be deleted prior to this
                      time. For example, a user may request that a pod is deleted
                      in 30 seconds. The Kubelet will react by sending a graceful
                      termination signal to the containers in the pod. After that
                      30 seconds, the Kubelet will send a hard termination signal
                      (SIGKILL) to the container and after cleanup, remove the pod
                      from the API. In the presence of network partitions, this object
                      may still exist after this timestamp, until an administrator
                      or automated process can determine the resource is fully terminated.
                      If not set, graceful deletion of the object has not been requested.  Populated
                      by the system when a graceful deletion is requested. Read-only.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                    type: string
                  finalizers:
                    description: Must be empty before the object is deleted from the
                      registry. Each entry is an identifier for the responsible component
                      that will remove the entry from the list. If the deletionTimestamp
                      of the object is non-nil, entries in this list can only be removed.
                      Finalizers may be processed and removed in any order.  Order
                      is NOT enforced because it introduces significant risk of stuck
                      finalizers. finalizers is a shared field, any actor with permission
                      can reorder it. If the finalizer list is processed in order,
                      then this can lead to a situation in which the component responsible
                      for the first finalizer in the list is waiting for a signal
                      (field value, external system, or other) produced by a component
                      responsible for a finalizer later in the list, resulting in
                      a deadlock. Without enforced ordering finalizers are free to
                      order amongst themselves and are not vulnerable to ordering
                      changes in the list.
                    items:
                      type: string
                    type: array
                  generateName:
                    description: 'GenerateName is an optional prefix, used by the
                      server, to generate a unique name ONLY IF the Name field has
                      not been provided. If this field is used, the name returned
                      to the client will be different than the name passed. This value
                      will also be combined with a unique suffix. The provided value
                      has the same validation rules as the Name field, and may be
                      truncated by the length of the suffix required to make the value
                      unique on the server.  If this field is specified and the generated
                      name exists, the server will NOT return a 409 - instead, it
                      will either return 201 Created or 500 with Reason ServerTimeout
                      indicating a unique name could not be found in the time allotted,
                      and the client should retry (optionally after the time indicated
                      in the Retry-After header).  Applied only if Name is not specified.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency'
                    type: string
                  generation:
                    description: A sequence number representing a specific generation
                      of the desired state. Populated by the system. Read-only.
                    format: int64
                    type: integer
                  labels:
                    description: 'Map of string keys and values that can be used to
                      organize and categorize (scope and select) objects. May match
                      selectors of replication controllers and services. More info:
                      http://kubernetes.io/docs/user-guide/labels'
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                  managedFields:
                    description: 'ManagedFields maps workflow-id and version to the
                      set of fields that are managed by that workflow. This is mostly
                      for internal housekeeping, and users typically shouldn''t need
                      to set or understand this field. A workflow can be the user''s
                      name, a controller''s name, or the name of a specific apply
                      path like "ci-cd". The set of fields is always in the version
                      that the workflow used when modifying the object. '
                    items:
                      properties:
                        apiVersion:
                          description: APIVersion defines the version of this resource
                            that this field set applies to. The format is "group/version"
                            just like the top-level APIVersion field. It is necessary
                            to track the version of a field set because it cannot
                            be automatically converted.
                          type: string
                        fieldsType:
                          description: 'FieldsType is the discriminator for the different
                            fields format and version. There is currently only one
                            possible value: "FieldsV1"'
                          type: string
                        fieldsV1:
                          description: FieldsV1 holds the first JSON version format
                            as described in the "FieldsV1" type.
                          type: string
                        manager:
                          description: Manager is an identifier of the workflow managing
                            these fields.
                          type: string
                        operation:
                          description: Operation is the type of operation which lead
                            to this ManagedFieldsEntry being created. The only valid
                            values for this field are "Apply" and "Update".
                          type: string
                        time:
                          description: Time is timestamp of when these fields were
                            set. It should always be empty if Operation is "Apply"
                          type: string
                      type: object
                    type: array
                  name:
                    description: 'Name must be unique within a namespace. Is required
                      when creating resources, although some resources may allow a
                      client to request the generation of an appropriate name automatically.
                      Name is primarily intended for creation idempotence and configuration
                      definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                    type: string
                  namespace:
                    description: 'Namespace defines the space within each name must
                      be unique. An empty namespace is equivalent to the "default"
                      namespace, but "default" is the canonical representation. Not
                      all objects are required to be scoped to a namespace - the value
                      of this field for those objects will be empty.  Must be a DNS_LABEL.
                      Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces'
                    type: string
                  ownerReferences:
                    description: List of objects depended by this object. If ALL objects
                      in the list have been deleted, this object will be garbage collected.
                      If this object is managed by a controller, then an entry in
                      this list will point to this controller, with the controller
                      field set to true. There cannot be more than one managing controller.
                    items:
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        blockOwnerDeletion:
                          description: If true, AND if the owner has the "foregroundDeletion"
                            finalizer, then the owner cannot be deleted from the key-value
                            store until this reference is removed. Defaults to false.
                            To set this field, a user needs "delete" permission of
                            the owner, otherwise 422 (Unprocessable Entity) will be
                            returned.
                          type: boolean
                        controller:
                          description: If true, this reference points to the managing
                            controller.
                          type: boolean
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                          type: string
                      type: object
                    type: array
                  resourceVersion:
                    description: 'An opaque value that represents the internal version
                      of this object that can be used by clients to determine when
                      objects have changed. May be used for optimistic concurrency,
                      change detection, and the watch operation on a resource or set
                      of resources. Clients must treat these values as opaque and
                      passed unmodified back to the server. They may only be valid
                      for a particular resource or set of resources.  Populated by
                      the system. Read-only. Value must be treated as opaque by clients
                      and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  selfLink:
                    description: SelfLink is a URL representing this object. Populated
                      by the system. Read-only.  DEPRECATED Kubernetes will stop propagating
                      this field in 1.20 release and the field is planned to be removed
                      in 1.21 release.
                    type: string
                  spec:
                    description: 'Specification of the desired behavior of the pod.
                      More info: Type ''kubectl explain pod.spec''. Also, https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                  uid:
                    description: 'UID is the unique in time and space value for this
                      object. It is typically generated by the server on successful
                      creation of a resource and is not allowed to change on PUT operations.  Populated
                      by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                    type: string
                type: object
            type: object
          status:
            description: ContainerSourceStatus defines the observed state of ContainerSource
              (from the controller).
            properties:
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              ceAttributes:
                description: CloudEventAttributes are the specific attributes that
                  the Source uses as part of its CloudEvents.
                items:
                  properties:
                    source:
                      description: Source is the CloudEvents source attribute.
                      type: string
                    type:
                      description: Type refers to the CloudEvent type attribute.
                      type: string
                  type: object
                type: array
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  required:
                  - type
                  - status
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the "Generation" of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
              sinkUri:
                description: SinkURI is the current active sink URI that has been
                  configured for the Source.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    knative.dev/crd-install: "true"
    kustomize.component: knative
  name: eventtypes.eventing.knative.dev
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: eventing-webhook
          namespace: knative-eventing
      conversionReviewVersions:
      - v1
      - v1beta1
  group: eventing.knative.dev
  names:
    categories:
    - all
    - knative
    - eventing
    kind: EventType
    plural: eventtypes
    singular: eventtype
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.type
      name: Type
      type: string
    - jsonPath: .spec.source
      name: Source
      type: string
    - jsonPath: .spec.schema
      name: Schema
      type: string
    - jsonPath: .spec.broker
      name: Broker
      type: string
    - jsonPath: .spec.description
      name: Description
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: EventType represents a type of event that can be consumed from
          a Broker.
        properties:
          spec:
            description: Spec defines the desired state of the EventType.
            properties:
              broker:
                type: string
              description:
                description: Description is an optional field used to describe the
                  EventType, in any meaningful way.
                type: string
              schema:
                description: Schema is a URI, it represents the CloudEvents schemaurl
                  extension attribute. It may be a JSON schema, a protobuf schema,
                  etc. It is optional.
                type: string
              schemaData:
                description: SchemaData allows the CloudEvents schema to be stored
                  directly in the EventType. Content is dependent on the encoding.
                  Optional attribute. The contents are not validated or manipulated
                  by the system.
                type: string
              source:
                description: Source is a URI, it represents the CloudEvents source.
                type: string
              type:
                description: Type represents the CloudEvents type. It is authoritative.
                type: string
            type: object
          status:
            description: Status represents the current state of the EventType. This
              data may be out of date.
            properties:
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  required:
                  - type
                  - status
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the 'Generation' of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
            type: object
        type: object
    served: false
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .spec.type
      name: Type
      type: string
    - jsonPath: .spec.source
      name: Source
      type: string
    - jsonPath: .spec.schema
      name: Schema
      type: string
    - jsonPath: .spec.broker
      name: Broker
      type: string
    - jsonPath: .spec.description
      name: Description
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: EventType represents a type of event that can be consumed from
          a Broker.
        properties:
          spec:
            description: Spec defines the desired state of the EventType.
            properties:
              broker:
                type: string
              description:
                description: Description is an optional field used to describe the
                  EventType, in any meaningful way.
                type: string
              schema:
                description: Schema is a URI, it represents the CloudEvents schemaurl
                  extension attribute. It may be a JSON schema, a protobuf schema,
                  etc. It is optional.
                type: string
              schemaData:
                description: SchemaData allows the CloudEvents schema to be stored
                  directly in the EventType. Content is dependent on the encoding.
                  Optional attribute. The contents are not validated or manipulated
                  by the system.
                type: string
              source:
                description: Source is a URI, it represents the CloudEvents source.
                type: string
              type:
                description: Type represents the CloudEvents type. It is authoritative.
                type: string
            type: object
          status:
            description: Status represents the current state of the EventType. This
              data may be out of date.
            properties:
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  required:
                  - type
                  - status
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the 'Generation' of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  labels:
    knative.dev/crd-install: "true"
  name: images.caching.internal.knative.dev
spec:
  group: caching.internal.knative.dev
  names:
    categories:
    - knative-internal
    - caching
    kind: Image
    plural: images
    shortNames:
    - img
    singular: image
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.image
      name: Image
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        type: object
        x-kubernetes-preserve-unknown-fields: true
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  labels:
    knative.dev/crd-install: "true"
    serving.knative.dev/release: v0.22.1
  name: ingresses.networking.internal.knative.dev
spec:
  group: networking.internal.knative.dev
  names:
    categories:
    - knative-internal
    - networking
    kind: Ingress
    plural: ingresses
    shortNames:
    - kingress
    - king
    singular: ingress
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Reason
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        type: object
        x-kubernetes-preserve-unknown-fields: true
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    duck.knative.dev/addressable: "true"
    eventing.knative.dev/release: v0.22.1
    knative.dev/crd-install: "true"
    kustomize.component: knative
    messaging.knative.dev/subscribable: "true"
  name: inmemorychannels.messaging.knative.dev
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: eventing-webhook
          namespace: knative-eventing
      conversionReviewVersions:
      - v1
      - v1beta1
  group: messaging.knative.dev
  names:
    categories:
    - all
    - knative
    - messaging
    - channel
    kind: InMemoryChannel
    plural: inmemorychannels
    shortNames:
    - imc
    singular: inmemorychannel
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.address.url
      name: URL
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        properties:
          spec:
            description: Spec defines the desired state of the Channel.
            properties:
              delivery:
                description: DeliverySpec contains the default delivery spec for each
                  subscription to this Channelable. Each subscription delivery spec,
                  if any, overrides this global delivery spec.
                properties:
                  backoffDelay:
                    description: 'BackoffDelay is the delay before retrying. More
                      information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html
                      - https://en.wikipedia.org/wiki/ISO_8601  For linear policy,
                      backoff delay is backoffDelay*<numberOfRetries>. For exponential
                      policy, backoff delay is backoffDelay*2^<numberOfRetries>.'
                    type: string
                  backoffPolicy:
                    description: BackoffPolicy is the retry backoff policy (linear,
                      exponential).
                    type: string
                  deadLetterSink:
                    description: DeadLetterSink is the sink receiving event that could
                      not be sent to a destination.
                    properties:
                      ref:
                        description: Ref points to an Addressable.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                              This is optional field, it gets defaulted to the object
                              holding it if left out.'
                            type: string
                        type: object
                      uri:
                        description: URI can be an absolute URL(non-empty scheme and
                          non-empty host) pointing to the target or a relative URI.
                          Relative URIs will be resolved using the base URI retrieved
                          from Ref.
                        type: string
                    type: object
                  retry:
                    description: Retry is the minimum number of retries the sender
                      should attempt when sending an event before moving it to the
                      dead letter sink.
                    format: int32
                    type: integer
                type: object
              subscribers:
                description: This is the list of subscriptions for this subscribable.
                items:
                  properties:
                    delivery:
                      description: DeliverySpec contains options controlling the event
                        delivery
                      properties:
                        backoffDelay:
                          description: 'BackoffDelay is the delay before retrying.
                            More information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html
                            - https://en.wikipedia.org/wiki/ISO_8601  For linear policy,
                            backoff delay is backoffDelay*<numberOfRetries>. For exponential
                            policy, backoff delay is backoffDelay*2^<numberOfRetries>.'
                          type: string
                        backoffPolicy:
                          description: BackoffPolicy is the retry backoff policy (linear,
                            exponential).
                          type: string
                        deadLetterSink:
                          description: DeadLetterSink is the sink receiving event
                            that could not be sent to a destination.
                          properties:
                            ref:
                              description: Ref points to an Addressable.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info:
                                    https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                                    This is optional field, it gets defaulted to the
                                    object holding it if left out.'
                                  type: string
                              type: object
                            uri:
                              description: URI can be an absolute URL(non-empty scheme
                                and non-empty host) pointing to the target or a relative
                                URI. Relative URIs will be resolved using the base
                                URI retrieved from Ref.
                              type: string
                          type: object
                        retry:
                          description: Retry is the minimum number of retries the
                            sender should attempt when sending an event before moving
                            it to the dead letter sink.
                          format: int32
                          type: integer
                      type: object
                    generation:
                      description: Generation of the origin of the subscriber with
                        uid:UID.
                      format: int64
                      type: integer
                    replyUri:
                      description: ReplyURI is the endpoint for the reply
                      type: string
                    subscriberUri:
                      description: SubscriberURI is the endpoint for the subscriber
                      type: string
                    uid:
                      description: UID is used to understand the origin of the subscriber.
                      type: string
                  type: object
                type: array
            type: object
          status:
            description: Status represents the current state of the Channel. This
              data may be out of date.
            properties:
              address:
                properties:
                  url:
                    type: string
                type: object
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  type: object
                type: array
              deadLetterChannel:
                description: DeadLetterChannel is a KReference and is set by the channel
                  when it supports native error handling via a channel Failed messages
                  are delivered here.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                      This is optional field, it gets defaulted to the object holding
                      it if left out.'
                    type: string
                type: object
              observedGeneration:
                description: ObservedGeneration is the 'Generation' of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
              subscribers:
                description: This is the list of subscription's statuses for this
                  channel.
                items:
                  properties:
                    message:
                      description: A human readable message indicating details of
                        Ready status.
                      type: string
                    observedGeneration:
                      description: Generation of the origin of the subscriber with
                        uid:UID.
                      format: int64
                      type: integer
                    ready:
                      description: Status of the subscriber.
                      type: string
                    uid:
                      description: UID is used to understand the origin of the subscriber.
                      type: string
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.address.url
      name: URL
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        properties:
          spec:
            description: Spec defines the desired state of the Channel.
            properties:
              delivery:
                description: DeliverySpec contains the default delivery spec for each
                  subscription to this Channelable. Each subscription delivery spec,
                  if any, overrides this global delivery spec.
                properties:
                  backoffDelay:
                    description: 'BackoffDelay is the delay before retrying. More
                      information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html
                      - https://en.wikipedia.org/wiki/ISO_8601  For linear policy,
                      backoff delay is backoffDelay*<numberOfRetries>. For exponential
                      policy, backoff delay is backoffDelay*2^<numberOfRetries>.'
                    type: string
                  backoffPolicy:
                    description: BackoffPolicy is the retry backoff policy (linear,
                      exponential).
                    type: string
                  deadLetterSink:
                    description: DeadLetterSink is the sink receiving event that could
                      not be sent to a destination.
                    properties:
                      ref:
                        description: Ref points to an Addressable.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                              This is optional field, it gets defaulted to the object
                              holding it if left out.'
                            type: string
                        type: object
                      uri:
                        description: URI can be an absolute URL(non-empty scheme and
                          non-empty host) pointing to the target or a relative URI.
                          Relative URIs will be resolved using the base URI retrieved
                          from Ref.
                        type: string
                    type: object
                  retry:
                    description: Retry is the minimum number of retries the sender
                      should attempt when sending an event before moving it to the
                      dead letter sink.
                    format: int32
                    type: integer
                type: object
              subscribers:
                description: This is the list of subscriptions for this subscribable.
                items:
                  properties:
                    delivery:
                      description: DeliverySpec contains options controlling the event
                        delivery
                      properties:
                        backoffDelay:
                          description: 'BackoffDelay is the delay before retrying.
                            More information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html
                            - https://en.wikipedia.org/wiki/ISO_8601  For linear policy,
                            backoff delay is backoffDelay*<numberOfRetries>. For exponential
                            policy, backoff delay is backoffDelay*2^<numberOfRetries>.'
                          type: string
                        backoffPolicy:
                          description: BackoffPolicy is the retry backoff policy (linear,
                            exponential).
                          type: string
                        deadLetterSink:
                          description: DeadLetterSink is the sink receiving event
                            that could not be sent to a destination.
                          properties:
                            ref:
                              description: Ref points to an Addressable.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info:
                                    https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                                    This is optional field, it gets defaulted to the
                                    object holding it if left out.'
                                  type: string
                              type: object
                            uri:
                              description: URI can be an absolute URL(non-empty scheme
                                and non-empty host) pointing to the target or a relative
                                URI. Relative URIs will be resolved using the base
                                URI retrieved from Ref.
                              type: string
                          type: object
                        retry:
                          description: Retry is the minimum number of retries the
                            sender should attempt when sending an event before moving
                            it to the dead letter sink.
                          format: int32
                          type: integer
                      type: object
                    generation:
                      description: Generation of the origin of the subscriber with
                        uid:UID.
                      format: int64
                      type: integer
                    replyUri:
                      description: ReplyURI is the endpoint for the reply
                      type: string
                    subscriberUri:
                      description: SubscriberURI is the endpoint for the subscriber
                      type: string
                    uid:
                      description: UID is used to understand the origin of the subscriber.
                      type: string
                  type: object
                type: array
            type: object
          status:
            description: Status represents the current state of the Channel. This
              data may be out of date.
            properties:
              address:
                properties:
                  url:
                    type: string
                type: object
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  type: object
                type: array
              deadLetterChannel:
                description: DeadLetterChannel is a KReference and is set by the channel
                  when it supports native error handling via a channel Failed messages
                  are delivered here.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                      This is optional field, it gets defaulted to the object holding
                      it if left out.'
                    type: string
                type: object
              observedGeneration:
                description: ObservedGeneration is the 'Generation' of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
              subscribers:
                description: This is the list of subscription's statuses for this
                  channel.
                items:
                  properties:
                    message:
                      description: A human readable message indicating details of
                        Ready status.
                      type: string
                    observedGeneration:
                      description: Generation of the origin of the subscriber with
                        uid:UID.
                      format: int64
                      type: integer
                    ready:
                      description: Status of the subscriber.
                      type: string
                    uid:
                      description: UID is used to understand the origin of the subscriber.
                      type: string
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  labels:
    knative.dev/crd-install: "true"
    serving.knative.dev/release: v0.22.1
  name: metrics.autoscaling.internal.knative.dev
spec:
  group: autoscaling.internal.knative.dev
  names:
    categories:
    - knative-internal
    - autoscaling
    kind: Metric
    plural: metrics
    singular: metric
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Reason
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        type: object
        x-kubernetes-preserve-unknown-fields: true
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    duck.knative.dev/addressable: "true"
    eventing.knative.dev/release: v0.22.1
    knative.dev/crd-install: "true"
    kustomize.component: knative
  name: parallels.flows.knative.dev
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: eventing-webhook
          namespace: knative-eventing
      conversionReviewVersions:
      - v1
      - v1beta1
  group: flows.knative.dev
  names:
    categories:
    - all
    - knative
    - flows
    kind: Parallel
    plural: parallels
    singular: parallel
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.address.url
      name: URL
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        properties:
          spec:
            description: Spec defines the desired state of the Parallel.
            properties:
              branches:
                description: Branches is the list of Filter/Subscribers pairs.
                items:
                  properties:
                    delivery:
                      description: Delivery is the delivery specification for events
                        to the subscriber This includes things like retries, DLQ,
                        etc.
                      properties:
                        backoffDelay:
                          description: 'BackoffDelay is the delay before retrying.
                            More information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html
                            - https://en.wikipedia.org/wiki/ISO_8601  For linear policy,
                            backoff delay is backoffDelay*<numberOfRetries>. For exponential
                            policy, backoff delay is backoffDelay*2^<numberOfRetries>.'
                          type: string
                        backoffPolicy:
                          description: BackoffPolicy is the retry backoff policy (linear,
                            exponential).
                          type: string
                        deadLetterSink:
                          description: DeadLetterSink is the sink receiving event
                            that could not be sent to a destination.
                          properties:
                            ref:
                              description: Ref points to an Addressable.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info:
                                    https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                                    This is optional field, it gets defaulted to the
                                    object holding it if left out.'
                                  type: string
                              type: object
                            uri:
                              description: URI can be an absolute URL(non-empty scheme
                                and non-empty host) pointing to the target or a relative
                                URI. Relative URIs will be resolved using the base
                                URI retrieved from Ref.
                              type: string
                          type: object
                        retry:
                          description: Retry is the minimum number of retries the
                            sender should attempt when sending an event before moving
                            it to the dead letter sink.
                          format: int32
                          type: integer
                      type: object
                    filter:
                      description: Filter is the expression guarding the branch
                      properties:
                        ref:
                          description: Ref points to an Addressable.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                                This is optional field, it gets defaulted to the object
                                holding it if left out.'
                              type: string
                          type: object
                        uri:
                          description: URI can be an absolute URL(non-empty scheme
                            and non-empty host) pointing to the target or a relative
                            URI. Relative URIs will be resolved using the base URI
                            retrieved from Ref.
                          type: string
                      type: object
                    reply:
                      description: Reply is a Reference to where the result of Subscriber
                        of this case gets sent to. If not specified, sent the result
                        to the Parallel Reply
                      properties:
                        ref:
                          description: Ref points to an Addressable.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                                This is optional field, it gets defaulted to the object
                                holding it if left out.'
                              type: string
                          type: object
                        uri:
                          description: URI can be an absolute URL(non-empty scheme
                            and non-empty host) pointing to the target or a relative
                            URI. Relative URIs will be resolved using the base URI
                            retrieved from Ref.
                          type: string
                      type: object
                    subscriber:
                      description: Subscriber receiving the event when the filter
                        passes
                      properties:
                        ref:
                          description: Ref points to an Addressable.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                                This is optional field, it gets defaulted to the object
                                holding it if left out.'
                              type: string
                          type: object
                        uri:
                          description: URI can be an absolute URL(non-empty scheme
                            and non-empty host) pointing to the target or a relative
                            URI. Relative URIs will be resolved using the base URI
                            retrieved from Ref.
                          type: string
                      type: object
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                type: array
              channelTemplate:
                description: ChannelTemplate specifies which Channel CRD to use. If
                  left unspecified, it is set to the default Channel CRD for the namespace
                  (or cluster, in case there are no defaults for the namespace).
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  spec:
                    description: Spec defines the Spec to use for each channel created.
                      Passed in verbatim to the Channel CRD as Spec section.
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                type: object
              reply:
                description: Reply is a Reference to where the result of a case Subscriber
                  gets sent to when the case does not have a Reply
                properties:
                  ref:
                    description: Ref points to an Addressable.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          This is optional field, it gets defaulted to the object
                          holding it if left out.'
                        type: string
                    type: object
                  uri:
                    description: URI can be an absolute URL(non-empty scheme and non-empty
                      host) pointing to the target or a relative URI. Relative URIs
                      will be resolved using the base URI retrieved from Ref.
                    type: string
                type: object
            type: object
          status:
            description: Status represents the current state of the Parallel. This
              data may be out of date.
            properties:
              address:
                properties:
                  url:
                    type: string
                type: object
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              branchStatuses:
                description: BranchStatuses is an array of corresponding to branch
                  statuses. Matches the Spec.Branches array in the order.
                items:
                  properties:
                    filterChannelStatus:
                      description: FilterChannelStatus corresponds to the filter channel
                        status.
                      properties:
                        channel:
                          description: Channel is the reference to the underlying
                            channel.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead
                                of an entire object, this string should contain a
                                valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                                For example, if the object reference is to a container
                                within a pod, this would take on a value like: "spec.containers{name}"
                                (where "name" refers to the name of the container
                                that triggered the event) or if no container name
                                is specified "spec.containers[2]" (container with
                                index 2 in this pod). This syntax is chosen only to
                                have some well-defined way of referencing a part of
                                an object.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this
                                reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                        ready:
                          description: ReadyCondition indicates whether the Channel
                            is ready or not.
                          properties:
                            message:
                              description: A human readable message indicating details
                                about the transition.
                              type: string
                            reason:
                              description: The reason for the condition's last transition.
                              type: string
                            severity:
                              description: Severity with which to treat failures of
                                this type of condition. When this is not specified,
                                it defaults to Error.
                              type: string
                            status:
                              description: Status of the condition, one of True, False,
                                Unknown.
                              type: string
                            type:
                              description: Type of condition.
                              type: string
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                      type: object
                    filterSubscriptionStatus:
                      description: FilterSubscriptionStatus corresponds to the filter
                        subscription status.
                      properties:
                        ready:
                          description: ReadyCondition indicates whether the Subscription
                            is ready or not.
                          properties:
                            message:
                              description: A human readable message indicating details
                                about the transition.
                              type: string
                            reason:
                              description: The reason for the condition's last transition.
                              type: string
                            severity:
                              description: Severity with which to treat failures of
                                this type of condition. When this is not specified,
                                it defaults to Error.
                              type: string
                            status:
                              description: Status of the condition, one of True, False,
                                Unknown.
                              type: string
                            type:
                              description: Type of condition.
                              type: string
                          type: object
                        subscription:
                          description: Subscription is the reference to the underlying
                            Subscription.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead
                                of an entire object, this string should contain a
                                valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                                For example, if the object reference is to a container
                                within a pod, this would take on a value like: "spec.containers{name}"
                                (where "name" refers to the name of the container
                                that triggered the event) or if no container name
                                is specified "spec.containers[2]" (container with
                                index 2 in this pod). This syntax is chosen only to
                                have some well-defined way of referencing a part of
                                an object.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this
                                reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                      type: object
                    subscriberSubscriptionStatus:
                      description: SubscriptionStatus corresponds to the subscriber
                        subscription status.
                      properties:
                        ready:
                          description: ReadyCondition indicates whether the Subscription
                            is ready or not.
                          properties:
                            message:
                              description: A human readable message indicating details
                                about the transition.
                              type: string
                            reason:
                              description: The reason for the condition's last transition.
                              type: string
                            severity:
                              description: Severity with which to treat failures of
                                this type of condition. When this is not specified,
                                it defaults to Error.
                              type: string
                            status:
                              description: Status of the condition, one of True, False,
                                Unknown.
                              type: string
                            type:
                              description: Type of condition.
                              type: string
                          type: object
                        subscription:
                          description: Subscription is the reference to the underlying
                            Subscription.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead
                                of an entire object, this string should contain a
                                valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                                For example, if the object reference is to a container
                                within a pod, this would take on a value like: "spec.containers{name}"
                                (where "name" refers to the name of the container
                                that triggered the event) or if no container name
                                is specified "spec.containers[2]" (container with
                                index 2 in this pod). This syntax is chosen only to
                                have some well-defined way of referencing a part of
                                an object.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this
                                reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                      type: object
                  type: object
                type: array
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  type: object
                type: array
              ingressChannelStatus:
                description: IngressChannelStatus corresponds to the ingress channel
                  status.
                properties:
                  channel:
                    description: Channel is the reference to the underlying channel.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead
                          of an entire object, this string should contain a valid
                          JSON/Go field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part
                          of an object.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                  ready:
                    description: ReadyCondition indicates whether the Channel is ready
                      or not.
                    properties:
                      message:
                        description: A human readable message indicating details about
                          the transition.
                        type: string
                      reason:
                        description: The reason for the condition's last transition.
                        type: string
                      severity:
                        description: Severity with which to treat failures of this
                          type of condition. When this is not specified, it defaults
                          to Error.
                        type: string
                      status:
                        description: Status of the condition, one of True, False,
                          Unknown.
                        type: string
                      type:
                        description: Type of condition.
                        type: string
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                type: object
              observedGeneration:
                description: ObservedGeneration is the 'Generation' of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.address.url
      name: URL
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        properties:
          spec:
            description: Spec defines the desired state of the Parallel.
            properties:
              branches:
                description: Branches is the list of Filter/Subscribers pairs.
                items:
                  properties:
                    delivery:
                      description: Delivery is the delivery specification for events
                        to the subscriber This includes things like retries, DLQ,
                        etc.
                      properties:
                        backoffDelay:
                          description: 'BackoffDelay is the delay before retrying.
                            More information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html
                            - https://en.wikipedia.org/wiki/ISO_8601  For linear policy,
                            backoff delay is backoffDelay*<numberOfRetries>. For exponential
                            policy, backoff delay is backoffDelay*2^<numberOfRetries>.'
                          type: string
                        backoffPolicy:
                          description: BackoffPolicy is the retry backoff policy (linear,
                            exponential).
                          type: string
                        deadLetterSink:
                          description: DeadLetterSink is the sink receiving event
                            that could not be sent to a destination.
                          properties:
                            ref:
                              description: Ref points to an Addressable.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info:
                                    https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                                    This is optional field, it gets defaulted to the
                                    object holding it if left out.'
                                  type: string
                              type: object
                            uri:
                              description: URI can be an absolute URL(non-empty scheme
                                and non-empty host) pointing to the target or a relative
                                URI. Relative URIs will be resolved using the base
                                URI retrieved from Ref.
                              type: string
                          type: object
                        retry:
                          description: Retry is the minimum number of retries the
                            sender should attempt when sending an event before moving
                            it to the dead letter sink.
                          format: int32
                          type: integer
                      type: object
                    filter:
                      description: Filter is the expression guarding the branch
                      properties:
                        ref:
                          description: Ref points to an Addressable.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                                This is optional field, it gets defaulted to the object
                                holding it if left out.'
                              type: string
                          type: object
                        uri:
                          description: URI can be an absolute URL(non-empty scheme
                            and non-empty host) pointing to the target or a relative
                            URI. Relative URIs will be resolved using the base URI
                            retrieved from Ref.
                          type: string
                      type: object
                    reply:
                      description: Reply is a Reference to where the result of Subscriber
                        of this case gets sent to. If not specified, sent the result
                        to the Parallel Reply
                      properties:
                        ref:
                          description: Ref points to an Addressable.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                                This is optional field, it gets defaulted to the object
                                holding it if left out.'
                              type: string
                          type: object
                        uri:
                          description: URI can be an absolute URL(non-empty scheme
                            and non-empty host) pointing to the target or a relative
                            URI. Relative URIs will be resolved using the base URI
                            retrieved from Ref.
                          type: string
                      type: object
                    subscriber:
                      description: Subscriber receiving the event when the filter
                        passes
                      properties:
                        ref:
                          description: Ref points to an Addressable.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                                This is optional field, it gets defaulted to the object
                                holding it if left out.'
                              type: string
                          type: object
                        uri:
                          description: URI can be an absolute URL(non-empty scheme
                            and non-empty host) pointing to the target or a relative
                            URI. Relative URIs will be resolved using the base URI
                            retrieved from Ref.
                          type: string
                      type: object
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                type: array
              channelTemplate:
                description: ChannelTemplate specifies which Channel CRD to use. If
                  left unspecified, it is set to the default Channel CRD for the namespace
                  (or cluster, in case there are no defaults for the namespace).
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  spec:
                    description: Spec defines the Spec to use for each channel created.
                      Passed in verbatim to the Channel CRD as Spec section.
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                type: object
              reply:
                description: Reply is a Reference to where the result of a case Subscriber
                  gets sent to when the case does not have a Reply
                properties:
                  ref:
                    description: Ref points to an Addressable.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          This is optional field, it gets defaulted to the object
                          holding it if left out.'
                        type: string
                    type: object
                  uri:
                    description: URI can be an absolute URL(non-empty scheme and non-empty
                      host) pointing to the target or a relative URI. Relative URIs
                      will be resolved using the base URI retrieved from Ref.
                    type: string
                type: object
            type: object
          status:
            description: Status represents the current state of the Parallel. This
              data may be out of date.
            properties:
              address:
                properties:
                  url:
                    type: string
                type: object
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              branchStatuses:
                description: BranchStatuses is an array of corresponding to branch
                  statuses. Matches the Spec.Branches array in the order.
                items:
                  properties:
                    filterChannelStatus:
                      description: FilterChannelStatus corresponds to the filter channel
                        status.
                      properties:
                        channel:
                          description: Channel is the reference to the underlying
                            channel.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead
                                of an entire object, this string should contain a
                                valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                                For example, if the object reference is to a container
                                within a pod, this would take on a value like: "spec.containers{name}"
                                (where "name" refers to the name of the container
                                that triggered the event) or if no container name
                                is specified "spec.containers[2]" (container with
                                index 2 in this pod). This syntax is chosen only to
                                have some well-defined way of referencing a part of
                                an object.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this
                                reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                        ready:
                          description: ReadyCondition indicates whether the Channel
                            is ready or not.
                          properties:
                            message:
                              description: A human readable message indicating details
                                about the transition.
                              type: string
                            reason:
                              description: The reason for the condition's last transition.
                              type: string
                            severity:
                              description: Severity with which to treat failures of
                                this type of condition. When this is not specified,
                                it defaults to Error.
                              type: string
                            status:
                              description: Status of the condition, one of True, False,
                                Unknown.
                              type: string
                            type:
                              description: Type of condition.
                              type: string
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                      type: object
                    filterSubscriptionStatus:
                      description: FilterSubscriptionStatus corresponds to the filter
                        subscription status.
                      properties:
                        ready:
                          description: ReadyCondition indicates whether the Subscription
                            is ready or not.
                          properties:
                            message:
                              description: A human readable message indicating details
                                about the transition.
                              type: string
                            reason:
                              description: The reason for the condition's last transition.
                              type: string
                            severity:
                              description: Severity with which to treat failures of
                                this type of condition. When this is not specified,
                                it defaults to Error.
                              type: string
                            status:
                              description: Status of the condition, one of True, False,
                                Unknown.
                              type: string
                            type:
                              description: Type of condition.
                              type: string
                          type: object
                        subscription:
                          description: Subscription is the reference to the underlying
                            Subscription.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead
                                of an entire object, this string should contain a
                                valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                                For example, if the object reference is to a container
                                within a pod, this would take on a value like: "spec.containers{name}"
                                (where "name" refers to the name of the container
                                that triggered the event) or if no container name
                                is specified "spec.containers[2]" (container with
                                index 2 in this pod). This syntax is chosen only to
                                have some well-defined way of referencing a part of
                                an object.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this
                                reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                      type: object
                    subscriberSubscriptionStatus:
                      description: SubscriptionStatus corresponds to the subscriber
                        subscription status.
                      properties:
                        ready:
                          description: ReadyCondition indicates whether the Subscription
                            is ready or not.
                          properties:
                            message:
                              description: A human readable message indicating details
                                about the transition.
                              type: string
                            reason:
                              description: The reason for the condition's last transition.
                              type: string
                            severity:
                              description: Severity with which to treat failures of
                                this type of condition. When this is not specified,
                                it defaults to Error.
                              type: string
                            status:
                              description: Status of the condition, one of True, False,
                                Unknown.
                              type: string
                            type:
                              description: Type of condition.
                              type: string
                          type: object
                        subscription:
                          description: Subscription is the reference to the underlying
                            Subscription.
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            fieldPath:
                              description: 'If referring to a piece of an object instead
                                of an entire object, this string should contain a
                                valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                                For example, if the object reference is to a container
                                within a pod, this would take on a value like: "spec.containers{name}"
                                (where "name" refers to the name of the container
                                that triggered the event) or if no container name
                                is specified "spec.containers[2]" (container with
                                index 2 in this pod). This syntax is chosen only to
                                have some well-defined way of referencing a part of
                                an object.'
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info:
                                https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                              type: string
                            resourceVersion:
                              description: 'Specific resourceVersion to which this
                                reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                              type: string
                            uid:
                              description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                              type: string
                          type: object
                      type: object
                  type: object
                type: array
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  type: object
                type: array
              ingressChannelStatus:
                description: IngressChannelStatus corresponds to the ingress channel
                  status.
                properties:
                  channel:
                    description: Channel is the reference to the underlying channel.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead
                          of an entire object, this string should contain a valid
                          JSON/Go field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part
                          of an object.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                  ready:
                    description: ReadyCondition indicates whether the Channel is ready
                      or not.
                    properties:
                      message:
                        description: A human readable message indicating details about
                          the transition.
                        type: string
                      reason:
                        description: The reason for the condition's last transition.
                        type: string
                      severity:
                        description: Severity with which to treat failures of this
                          type of condition. When this is not specified, it defaults
                          to Error.
                        type: string
                      status:
                        description: Status of the condition, one of True, False,
                          Unknown.
                        type: string
                      type:
                        description: Type of condition.
                        type: string
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                type: object
              observedGeneration:
                description: ObservedGeneration is the 'Generation' of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    registry.knative.dev/eventTypes: |
      [
        { "type": "dev.knative.sources.ping" }
      ]
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    duck.knative.dev/source: "true"
    eventing.knative.dev/release: v0.22.1
    eventing.knative.dev/source: "true"
    knative.dev/crd-install: "true"
    kustomize.component: knative
  name: pingsources.sources.knative.dev
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: eventing-webhook
          namespace: knative-eventing
      conversionReviewVersions:
      - v1
      - v1beta1
  group: sources.knative.dev
  names:
    categories:
    - all
    - knative
    - sources
    kind: PingSource
    plural: pingsources
    singular: pingsource
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.sinkUri
      name: Sink
      type: string
    - jsonPath: .spec.schedule
      name: Schedule
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Reason
      type: string
    name: v1alpha2
    schema:
      openAPIV3Schema:
        description: PingSource describes an event source with a fixed payload produced
          on a specified cron schedule.
        properties:
          spec:
            description: PingSourceSpec defines the desired state of the PingSource
              (from the client).
            properties:
              ceOverrides:
                description: CloudEventOverrides defines overrides to control the
                  output format and modifications of the event sent to the sink.
                properties:
                  extensions:
                    additionalProperties:
                      type: string
                    description: Extensions specify what attribute are added or overridden
                      on the outbound event. Each `Extensions` key-value pair are
                      set on the event as an attribute extension independently.
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                type: object
              jsonData:
                description: JsonData is json encoded data used as the body of the
                  event posted to the sink. Default is empty. If set, datacontenttype
                  will also be set to "application/json".
                type: string
              schedule:
                description: Schedule is the cronjob schedule. Defaults to `* * *
                  * *`.
                type: string
              sink:
                description: Sink is a reference to an object that will resolve to
                  a uri to use as the sink.
                properties:
                  ref:
                    description: Ref points to an Addressable.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          This is optional field, it gets defaulted to the object
                          holding it if left out.'
                        type: string
                    type: object
                  uri:
                    description: URI can be an absolute URL(non-empty scheme and non-empty
                      host) pointing to the target or a relative URI. Relative URIs
                      will be resolved using the base URI retrieved from Ref.
                    type: string
                type: object
            type: object
          status:
            description: PingSourceStatus defines the observed state of PingSource
              (from the controller).
            properties:
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              ceAttributes:
                description: CloudEventAttributes are the specific attributes that
                  the Source uses as part of its CloudEvents.
                items:
                  properties:
                    source:
                      description: Source is the CloudEvents source attribute.
                      type: string
                    type:
                      description: Type refers to the CloudEvent type attribute.
                      type: string
                  type: object
                type: array
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  required:
                  - type
                  - status
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the "Generation" of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
              sinkUri:
                description: SinkURI is the current active sink URI that has been
                  configured for the Source.
                type: string
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.sinkUri
      name: Sink
      type: string
    - jsonPath: .spec.schedule
      name: Schedule
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Reason
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: PingSource describes an event source with a fixed payload produced
          on a specified cron schedule.
        properties:
          spec:
            description: PingSourceSpec defines the desired state of the PingSource
              (from the client).
            properties:
              ceOverrides:
                description: CloudEventOverrides defines overrides to control the
                  output format and modifications of the event sent to the sink.
                properties:
                  extensions:
                    additionalProperties:
                      type: string
                    description: Extensions specify what attribute are added or overridden
                      on the outbound event. Each `Extensions` key-value pair are
                      set on the event as an attribute extension independently.
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                type: object
              jsonData:
                description: JsonData is json encoded data used as the body of the
                  event posted to the sink. Default is empty. If set, datacontenttype
                  will also be set to "application/json".
                type: string
              schedule:
                description: Schedule is the cronjob schedule. Defaults to `* * *
                  * *`.
                type: string
              sink:
                description: Sink is a reference to an object that will resolve to
                  a uri to use as the sink.
                properties:
                  ref:
                    description: Ref points to an Addressable.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          This is optional field, it gets defaulted to the object
                          holding it if left out.'
                        type: string
                    type: object
                  uri:
                    description: URI can be an absolute URL(non-empty scheme and non-empty
                      host) pointing to the target or a relative URI. Relative URIs
                      will be resolved using the base URI retrieved from Ref.
                    type: string
                type: object
              timezone:
                description: 'Timezone modifies the actual time relative to the specified
                  timezone. Defaults to the system time zone. More general information
                  about time zones: https://www.iana.org/time-zones List of valid
                  timezone values: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones'
                type: string
            type: object
          status:
            description: PingSourceStatus defines the observed state of PingSource
              (from the controller).
            properties:
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              ceAttributes:
                description: CloudEventAttributes are the specific attributes that
                  the Source uses as part of its CloudEvents.
                items:
                  properties:
                    source:
                      description: Source is the CloudEvents source attribute.
                      type: string
                    type:
                      description: Type refers to the CloudEvent type attribute.
                      type: string
                  type: object
                type: array
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  required:
                  - type
                  - status
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the "Generation" of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
              sinkUri:
                description: SinkURI is the current active sink URI that has been
                  configured for the Source.
                type: string
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.sinkUri
      name: Sink
      type: string
    - jsonPath: .spec.schedule
      name: Schedule
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Reason
      type: string
    name: v1beta2
    schema:
      openAPIV3Schema:
        description: PingSource describes an event source with a fixed payload produced
          on a specified cron schedule.
        properties:
          spec:
            description: PingSourceSpec defines the desired state of the PingSource
              (from the client).
            properties:
              ceOverrides:
                description: CloudEventOverrides defines overrides to control the
                  output format and modifications of the event sent to the sink.
                properties:
                  extensions:
                    additionalProperties:
                      type: string
                    description: Extensions specify what attribute are added or overridden
                      on the outbound event. Each `Extensions` key-value pair are
                      set on the event as an attribute extension independently.
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                type: object
              contentType:
                description: ContentType is the media type of `data` or `dataBase64`.
                  Default is empty.
                type: string
              data:
                description: Data is data used as the body of the event posted to
                  the sink. Default is empty. Mutually exclusive with `dataBase64`.
                type: string
              dataBase64:
                description: DataBase64 is the base64-encoded string of the actual
                  event's body posted to the sink. Default is empty. Mutually exclusive
                  with `data`.
                type: string
              schedule:
                description: Schedule is the cron schedule. Defaults to `* * * * *`.
                type: string
              sink:
                description: Sink is a reference to an object that will resolve to
                  a uri to use as the sink.
                properties:
                  ref:
                    description: Ref points to an Addressable.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          This is optional field, it gets defaulted to the object
                          holding it if left out.'
                        type: string
                    type: object
                  uri:
                    description: URI can be an absolute URL(non-empty scheme and non-empty
                      host) pointing to the target or a relative URI. Relative URIs
                      will be resolved using the base URI retrieved from Ref.
                    type: string
                type: object
              timezone:
                description: 'Timezone modifies the actual time relative to the specified
                  timezone. Defaults to the system time zone. More general information
                  about time zones: https://www.iana.org/time-zones List of valid
                  timezone values: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones'
                type: string
            type: object
          status:
            description: PingSourceStatus defines the observed state of PingSource
              (from the controller).
            properties:
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              ceAttributes:
                description: CloudEventAttributes are the specific attributes that
                  the Source uses as part of its CloudEvents.
                items:
                  properties:
                    source:
                      description: Source is the CloudEvents source attribute.
                      type: string
                    type:
                      description: Type refers to the CloudEvent type attribute.
                      type: string
                  type: object
                type: array
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  required:
                  - type
                  - status
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the "Generation" of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
              sinkUri:
                description: SinkURI is the current active sink URI that has been
                  configured for the Source.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  labels:
    knative.dev/crd-install: "true"
    serving.knative.dev/release: v0.22.1
  name: podautoscalers.autoscaling.internal.knative.dev
spec:
  group: autoscaling.internal.knative.dev
  names:
    categories:
    - knative-internal
    - autoscaling
    kind: PodAutoscaler
    plural: podautoscalers
    shortNames:
    - kpa
    - pa
    singular: podautoscaler
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.desiredScale
      name: DesiredScale
      type: integer
    - jsonPath: .status.actualScale
      name: ActualScale
      type: integer
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Reason
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        type: object
        x-kubernetes-preserve-unknown-fields: true
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  labels:
    knative.dev/crd-install: "true"
    serving.knative.dev/release: v0.22.1
  name: revisions.serving.knative.dev
spec:
  group: serving.knative.dev
  names:
    categories:
    - all
    - knative
    - serving
    kind: Revision
    plural: revisions
    shortNames:
    - rev
    singular: revision
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.labels['serving\.knative\.dev/configuration']
      name: Config Name
      type: string
    - jsonPath: .status.serviceName
      name: K8s Service Name
      type: string
    - jsonPath: .metadata.labels['serving\.knative\.dev/configurationGeneration']
      name: Generation
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Reason
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        type: object
        x-kubernetes-preserve-unknown-fields: true
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  labels:
    duck.knative.dev/addressable: "true"
    knative.dev/crd-install: "true"
    serving.knative.dev/release: v0.22.1
  name: routes.serving.knative.dev
spec:
  group: serving.knative.dev
  names:
    categories:
    - all
    - knative
    - serving
    kind: Route
    plural: routes
    shortNames:
    - rt
    singular: route
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.url
      name: URL
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Reason
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        type: object
        x-kubernetes-preserve-unknown-fields: true
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    duck.knative.dev/addressable: "true"
    eventing.knative.dev/release: v0.22.1
    knative.dev/crd-install: "true"
    kustomize.component: knative
  name: sequences.flows.knative.dev
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: eventing-webhook
          namespace: knative-eventing
      conversionReviewVersions:
      - v1
      - v1beta1
  group: flows.knative.dev
  names:
    categories:
    - all
    - knative
    - flows
    kind: Sequence
    plural: sequences
    singular: sequence
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.address.url
      name: URL
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        properties:
          spec:
            description: Spec defines the desired state of the Sequence.
            properties:
              channelTemplate:
                description: ChannelTemplate specifies which Channel CRD to use. If
                  left unspecified, it is set to the default Channel CRD for the namespace
                  (or cluster, in case there are no defaults for the namespace).
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  spec:
                    description: Spec defines the Spec to use for each channel created.
                      Passed in verbatim to the Channel CRD as Spec section.
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                type: object
              reply:
                description: Reply is a Reference to where the result of the last
                  Subscriber gets sent to.
                properties:
                  ref:
                    description: Ref points to an Addressable.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          This is optional field, it gets defaulted to the object
                          holding it if left out.'
                        type: string
                    type: object
                  uri:
                    description: URI can be an absolute URL(non-empty scheme and non-empty
                      host) pointing to the target or a relative URI. Relative URIs
                      will be resolved using the base URI retrieved from Ref.
                    type: string
                type: object
              steps:
                description: Steps is the list of Destinations (processors / functions)
                  that will be called in the order provided. Each step has its own
                  delivery options
                items:
                  properties:
                    delivery:
                      description: Delivery is the delivery specification for events
                        to the subscriber This includes things like retries, DLQ,
                        etc.
                      properties:
                        backoffDelay:
                          description: 'BackoffDelay is the delay before retrying.
                            More information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html
                            - https://en.wikipedia.org/wiki/ISO_8601  For linear policy,
                            backoff delay is backoffDelay*<numberOfRetries>. For exponential
                            policy, backoff delay is backoffDelay*2^<numberOfRetries>.'
                          type: string
                        backoffPolicy:
                          description: BackoffPolicy is the retry backoff policy (linear,
                            exponential).
                          type: string
                        deadLetterSink:
                          description: DeadLetterSink is the sink receiving event
                            that could not be sent to a destination.
                          properties:
                            ref:
                              description: Ref points to an Addressable.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info:
                                    https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                                    This is optional field, it gets defaulted to the
                                    object holding it if left out.'
                                  type: string
                              type: object
                            uri:
                              description: URI can be an absolute URL(non-empty scheme
                                and non-empty host) pointing to the target or a relative
                                URI. Relative URIs will be resolved using the base
                                URI retrieved from Ref.
                              type: string
                          type: object
                        retry:
                          description: Retry is the minimum number of retries the
                            sender should attempt when sending an event before moving
                            it to the dead letter sink.
                          format: int32
                          type: integer
                      type: object
                    ref:
                      description: Ref points to an Addressable.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                            This is optional field, it gets defaulted to the object
                            holding it if left out.'
                          type: string
                      type: object
                    uri:
                      description: URI can be an absolute URL(non-empty scheme and
                        non-empty host) pointing to the target or a relative URI.
                        Relative URIs will be resolved using the base URI retrieved
                        from Ref.
                      type: string
                  type: object
                type: array
            type: object
          status:
            description: Status represents the current state of the Sequence. This
              data may be out of date.
            properties:
              address:
                properties:
                  url:
                    type: string
                type: object
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
              channelStatuses:
                description: ChannelStatuses is an array of corresponding Channel
                  statuses. Matches the Spec.Steps array in the order.
                items:
                  properties:
                    channel:
                      description: Channel is the reference to the underlying channel.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead
                            of an entire object, this string should contain a valid
                            JSON/Go field access statement, such as desiredState.manifest.containers[2].
                            For example, if the object reference is to a container
                            within a pod, this would take on a value like: "spec.containers{name}"
                            (where "name" refers to the name of the container that
                            triggered the event) or if no container name is specified
                            "spec.containers[2]" (container with index 2 in this pod).
                            This syntax is chosen only to have some well-defined way
                            of referencing a part of an object.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference
                            is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                    ready:
                      description: ReadyCondition indicates whether the Channel is
                        ready or not.
                      properties:
                        message:
                          description: A human readable message indicating details
                            about the transition.
                          type: string
                        reason:
                          description: The reason for the condition's last transition.
                          type: string
                        severity:
                          description: Severity with which to treat failures of this
                            type of condition. When this is not specified, it defaults
                            to Error.
                          type: string
                        status:
                          description: Status of the condition, one of True, False,
                            Unknown.
                          type: string
                        type:
                          description: Type of condition.
                          type: string
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                  type: object
                type: array
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the 'Generation' of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
              subscriptionStatuses:
                description: SubscriptionStatuses is an array of corresponding Subscription
                  statuses. Matches the Spec.Steps array in the order.
                items:
                  properties:
                    ready:
                      description: ReadyCondition indicates whether the Subscription
                        is ready or not.
                      properties:
                        message:
                          description: A human readable message indicating details
                            about the transition.
                          type: string
                        reason:
                          description: The reason for the condition's last transition.
                          type: string
                        severity:
                          description: Severity with which to treat failures of this
                            type of condition. When this is not specified, it defaults
                            to Error.
                          type: string
                        status:
                          description: Status of the condition, one of True, False,
                            Unknown.
                          type: string
                        type:
                          description: Type of condition.
                          type: string
                      type: object
                    subscription:
                      description: Subscription is the reference to the underlying
                        Subscription.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead
                            of an entire object, this string should contain a valid
                            JSON/Go field access statement, such as desiredState.manifest.containers[2].
                            For example, if the object reference is to a container
                            within a pod, this would take on a value like: "spec.containers{name}"
                            (where "name" refers to the name of the container that
                            triggered the event) or if no container name is specified
                            "spec.containers[2]" (container with index 2 in this pod).
                            This syntax is chosen only to have some well-defined way
                            of referencing a part of an object.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference
                            is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.address.url
      name: URL
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        properties:
          spec:
            description: Spec defines the desired state of the Sequence.
            properties:
              channelTemplate:
                description: ChannelTemplate specifies which Channel CRD to use. If
                  left unspecified, it is set to the default Channel CRD for the namespace
                  (or cluster, in case there are no defaults for the namespace).
                properties:
                  apiVersion:
                    description: 'APIVersion defines the versioned schema of this
                      representation of an object. Servers should convert recognized
                      schemas to the latest internal value, and may reject unrecognized
                      values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                    type: string
                  kind:
                    description: 'Kind is a string value representing the REST resource
                      this object represents. Servers may infer this from the endpoint
                      the client submits requests to. Cannot be updated. In CamelCase.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  spec:
                    description: Spec defines the Spec to use for each channel created.
                      Passed in verbatim to the Channel CRD as Spec section.
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                type: object
              reply:
                description: Reply is a Reference to where the result of the last
                  Subscriber gets sent to.
                properties:
                  ref:
                    description: Ref points to an Addressable.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          This is optional field, it gets defaulted to the object
                          holding it if left out.'
                        type: string
                    type: object
                  uri:
                    description: URI can be an absolute URL(non-empty scheme and non-empty
                      host) pointing to the target or a relative URI. Relative URIs
                      will be resolved using the base URI retrieved from Ref.
                    type: string
                type: object
              steps:
                description: Steps is the list of Destinations (processors / functions)
                  that will be called in the order provided. Each step has its own
                  delivery options
                items:
                  properties:
                    delivery:
                      description: Delivery is the delivery specification for events
                        to the subscriber This includes things like retries, DLQ,
                        etc.
                      properties:
                        backoffDelay:
                          description: 'BackoffDelay is the delay before retrying.
                            More information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html
                            - https://en.wikipedia.org/wiki/ISO_8601  For linear policy,
                            backoff delay is backoffDelay*<numberOfRetries>. For exponential
                            policy, backoff delay is backoffDelay*2^<numberOfRetries>.'
                          type: string
                        backoffPolicy:
                          description: BackoffPolicy is the retry backoff policy (linear,
                            exponential).
                          type: string
                        deadLetterSink:
                          description: DeadLetterSink is the sink receiving event
                            that could not be sent to a destination.
                          properties:
                            ref:
                              description: Ref points to an Addressable.
                              properties:
                                apiVersion:
                                  description: API version of the referent.
                                  type: string
                                kind:
                                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                                namespace:
                                  description: 'Namespace of the referent. More info:
                                    https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                                    This is optional field, it gets defaulted to the
                                    object holding it if left out.'
                                  type: string
                              type: object
                            uri:
                              description: URI can be an absolute URL(non-empty scheme
                                and non-empty host) pointing to the target or a relative
                                URI. Relative URIs will be resolved using the base
                                URI retrieved from Ref.
                              type: string
                          type: object
                        retry:
                          description: Retry is the minimum number of retries the
                            sender should attempt when sending an event before moving
                            it to the dead letter sink.
                          format: int32
                          type: integer
                      type: object
                    ref:
                      description: Ref points to an Addressable.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                            This is optional field, it gets defaulted to the object
                            holding it if left out.'
                          type: string
                      type: object
                    uri:
                      description: URI can be an absolute URL(non-empty scheme and
                        non-empty host) pointing to the target or a relative URI.
                        Relative URIs will be resolved using the base URI retrieved
                        from Ref.
                      type: string
                  type: object
                type: array
            type: object
          status:
            description: Status represents the current state of the Sequence. This
              data may be out of date.
            properties:
              address:
                properties:
                  url:
                    type: string
                type: object
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
              channelStatuses:
                description: ChannelStatuses is an array of corresponding Channel
                  statuses. Matches the Spec.Steps array in the order.
                items:
                  properties:
                    channel:
                      description: Channel is the reference to the underlying channel.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead
                            of an entire object, this string should contain a valid
                            JSON/Go field access statement, such as desiredState.manifest.containers[2].
                            For example, if the object reference is to a container
                            within a pod, this would take on a value like: "spec.containers{name}"
                            (where "name" refers to the name of the container that
                            triggered the event) or if no container name is specified
                            "spec.containers[2]" (container with index 2 in this pod).
                            This syntax is chosen only to have some well-defined way
                            of referencing a part of an object.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference
                            is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                    ready:
                      description: ReadyCondition indicates whether the Channel is
                        ready or not.
                      properties:
                        message:
                          description: A human readable message indicating details
                            about the transition.
                          type: string
                        reason:
                          description: The reason for the condition's last transition.
                          type: string
                        severity:
                          description: Severity with which to treat failures of this
                            type of condition. When this is not specified, it defaults
                            to Error.
                          type: string
                        status:
                          description: Status of the condition, one of True, False,
                            Unknown.
                          type: string
                        type:
                          description: Type of condition.
                          type: string
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                  type: object
                type: array
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the 'Generation' of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
              subscriptionStatuses:
                description: SubscriptionStatuses is an array of corresponding Subscription
                  statuses. Matches the Spec.Steps array in the order.
                items:
                  properties:
                    ready:
                      description: ReadyCondition indicates whether the Subscription
                        is ready or not.
                      properties:
                        message:
                          description: A human readable message indicating details
                            about the transition.
                          type: string
                        reason:
                          description: The reason for the condition's last transition.
                          type: string
                        severity:
                          description: Severity with which to treat failures of this
                            type of condition. When this is not specified, it defaults
                            to Error.
                          type: string
                        status:
                          description: Status of the condition, one of True, False,
                            Unknown.
                          type: string
                        type:
                          description: Type of condition.
                          type: string
                      type: object
                    subscription:
                      description: Subscription is the reference to the underlying
                        Subscription.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead
                            of an entire object, this string should contain a valid
                            JSON/Go field access statement, such as desiredState.manifest.containers[2].
                            For example, if the object reference is to a container
                            within a pod, this would take on a value like: "spec.containers{name}"
                            (where "name" refers to the name of the container that
                            triggered the event) or if no container name is specified
                            "spec.containers[2]" (container with index 2 in this pod).
                            This syntax is chosen only to have some well-defined way
                            of referencing a part of an object.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference
                            is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  labels:
    knative.dev/crd-install: "true"
    serving.knative.dev/release: v0.22.1
  name: serverlessservices.networking.internal.knative.dev
spec:
  group: networking.internal.knative.dev
  names:
    categories:
    - knative-internal
    - networking
    kind: ServerlessService
    plural: serverlessservices
    shortNames:
    - sks
    singular: serverlessservice
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.mode
      name: Mode
      type: string
    - jsonPath: .spec.numActivators
      name: Activators
      type: integer
    - jsonPath: .status.serviceName
      name: ServiceName
      type: string
    - jsonPath: .status.privateServiceName
      name: PrivateServiceName
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Reason
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        type: object
        x-kubernetes-preserve-unknown-fields: true
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  labels:
    duck.knative.dev/addressable: "true"
    duck.knative.dev/podspecable: "true"
    knative.dev/crd-install: "true"
    serving.knative.dev/release: v0.22.1
  name: services.serving.knative.dev
spec:
  group: serving.knative.dev
  names:
    categories:
    - all
    - knative
    - serving
    kind: Service
    plural: services
    shortNames:
    - kservice
    - ksvc
    singular: service
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.url
      name: URL
      type: string
    - jsonPath: .status.latestCreatedRevisionName
      name: LatestCreated
      type: string
    - jsonPath: .status.latestReadyRevisionName
      name: LatestReady
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Reason
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        properties:
          spec:
            properties:
              template:
                description: |
                  A template for the current desired application state.
                  Changes to `template` will cause a new Revision to be created as
                  defined in the lifecycle section. The contents of the Service's
                  RevisionTemplateSpec is used to create a corresponding Configuration.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              traffic:
                description: |
                  Traffic specifies how to distribute traffic over a
                  collection of Revisions belonging to the Service. If traffic is
                  empty or not provided, defaults to 100% traffic to the latest
                  `Ready` Revision. The contents of the Service's TrafficTarget is
                  used to create a corresponding Route.
                items:
                  properties:
                    configurationName:
                      description: |
                        ConfigurationName of a configuration to whose latest revision we will send
                        this portion of traffic. When the "status.latestReadyRevisionName" of the
                        referenced configuration changes, we will automatically migrate traffic
                        from the prior "latest ready" revision to the new one.  This field is never
                        set in Route's status, only its spec.
                        This is mutually exclusive with RevisionName.
                      type: string
                    latestRevision:
                      description: |
                        `latestRevision` may be optionally provided to indicate
                        that the latest ready Revision of the Configuration should be used
                        for this traffic target. When provided latestRevision MUST be true
                        if revisionName is empty, and it MUST be false when revisionName is non-empty.
                      type: boolean
                    percent:
                      description: |
                        The percentage of requests which should be allocated
                        from the main Route domain name to the specified `revisionName` or
                        `configurationName`.
                        All `percent` values in `traffic` MUST sum to 100.
                      maximum: 100
                      minimum: 0
                      type: integer
                    revisionName:
                      description: |
                        A specific revision to which to send this portion
                        of traffic.
                        This is mutually exclusive with configurationName.
                      type: string
                    tag:
                      description: |
                        Tag is optionally used to expose a dedicated URL for
                        referencing this target exclusively. The dedicated URL MUST include
                        in it the string provided by tag.
                      type: string
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                type: array
                x-kubernetes-preserve-unknown-fields: true
            type: object
            x-kubernetes-preserve-unknown-fields: true
          status:
            type: object
            x-kubernetes-preserve-unknown-fields: true
        type: object
        x-kubernetes-preserve-unknown-fields: true
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    duck.knative.dev/binding: "true"
    duck.knative.dev/source: "true"
    eventing.knative.dev/release: v0.22.1
    eventing.knative.dev/source: "true"
    knative.dev/crd-install: "true"
    kustomize.component: knative
  name: sinkbindings.sources.knative.dev
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: eventing-webhook
          namespace: knative-eventing
      conversionReviewVersions:
      - v1
      - v1beta1
  group: sources.knative.dev
  names:
    categories:
    - all
    - knative
    - sources
    - bindings
    kind: SinkBinding
    plural: sinkbindings
    singular: sinkbinding
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.sinkUri
      name: Sink
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Reason
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        type: object
        x-kubernetes-preserve-unknown-fields: true
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.sinkUri
      name: Sink
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Reason
      type: string
    name: v1alpha2
    schema:
      openAPIV3Schema:
        type: object
        x-kubernetes-preserve-unknown-fields: true
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.sinkUri
      name: Sink
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Reason
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        type: object
        x-kubernetes-preserve-unknown-fields: true
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .status.sinkUri
      name: Sink
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Reason
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        description: SinkBinding describes a Binding that is also a Source. The `sink`
          (from the Source duck) is resolved to a URL and then projected into the
          `subject` by augmenting the runtime contract of the referenced containers
          to have a `K_SINK` environment variable holding the endpoint to which to
          send cloud events.
        properties:
          spec:
            description: SinkBindingSpec holds the desired state of the SinkBinding
              (from the client).
            properties:
              ceOverrides:
                description: CloudEventOverrides defines overrides to control the
                  output format and modifications of the event sent to the sink.
                properties:
                  extensions:
                    additionalProperties:
                      type: string
                    description: Extensions specify what attribute are added or overridden
                      on the outbound event. Each `Extensions` key-value pair are
                      set on the event as an attribute extension independently.
                    type: object
                type: object
              sink:
                description: Sink is a reference to an object that will resolve to
                  a uri to use as the sink.
                properties:
                  ref:
                    description: Ref points to an Addressable.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          This is optional field, it gets defaulted to the object
                          holding it if left out.'
                        type: string
                    type: object
                  uri:
                    description: URI can be an absolute URL(non-empty scheme and non-empty
                      host) pointing to the target or a relative URI. Relative URIs
                      will be resolved using the base URI retrieved from Ref.
                    type: string
                type: object
              subject:
                description: Subject references the resource(s) whose "runtime contract"
                  should be augmented by Binding implementations.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  kind:
                    description: Kind of the referent.
                    type: string
                  name:
                    description: Name of the referent. Mutually exclusive with Selector.
                    type: string
                  namespace:
                    description: Namespace of the referent.
                    type: string
                  selector:
                    description: Selector of the referents. Mutually exclusive with
                      Name.
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        items:
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          type: object
                        type: array
                      matchLabels:
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                        x-kubernetes-preserve-unknown-fields: true
                    type: object
                type: object
            type: object
          status:
            description: SinkBindingStatus communicates the observed state of the
              SinkBinding (from the controller).
            properties:
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              ceAttributes:
                description: CloudEventAttributes are the specific attributes that
                  the Source uses as part of its CloudEvents.
                items:
                  properties:
                    source:
                      description: Source is the CloudEvents source attribute.
                      type: string
                    type:
                      description: Type refers to the CloudEvent type attribute.
                      type: string
                  type: object
                type: array
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  required:
                  - type
                  - status
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the 'Generation' of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
              sinkUri:
                description: SinkURI is the current active sink URI that has been
                  configured for the Source.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    knative.dev/crd-install: "true"
    kustomize.component: knative
  name: subscriptions.messaging.knative.dev
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: eventing-webhook
          namespace: knative-eventing
      conversionReviewVersions:
      - v1
      - v1beta1
  group: messaging.knative.dev
  names:
    categories:
    - all
    - knative
    - messaging
    kind: Subscription
    plural: subscriptions
    shortNames:
    - sub
    singular: subscription
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: Subscription routes events received on a Channel to a DNS name
          and corresponds to the subscriptions.channels.knative.dev CRD.
        properties:
          spec:
            description: |-
              Specifies the Channel for incoming events, a Subscriber target for processing those events and where to put the result of the processing. Only From (where the events are coming from) is always required. You can optionally only Process the events (results in no output events) by leaving out the Result. You can also perform an identity transformation on the incoming events by leaving out the Subscriber and only specifying Result.
              The following are all valid specifications: channel --[subscriber]--> reply Sink, no outgoing events: channel -- subscriber no-op function (identity transformation): channel --> reply
            properties:
              channel:
                description: 'Reference to a channel that will be used to create the
                  subscription You can specify only the following fields of the ObjectReference:
                  - Kind - APIVersion - Name The resource pointed by this ObjectReference
                  must meet the contract to the ChannelableSpec duck type. If the
                  resource does not meet this contract it will be reflected in the
                  Subscription''s status.  This field is immutable. We have no good
                  answer on what happens to the events that are currently in the channel
                  being consumed from and what the semantics there should be. For
                  now, you can always delete the Subscription and recreate it to point
                  to a different channel, giving the user more control over what semantics
                  should be used (drain the channel first, possibly have events dropped,
                  etc.)'
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
              delivery:
                description: Delivery configuration
                properties:
                  backoffDelay:
                    description: 'BackoffDelay is the delay before retrying. More
                      information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html
                      - https://en.wikipedia.org/wiki/ISO_8601  For linear policy,
                      backoff delay is backoffDelay*<numberOfRetries>. For exponential
                      policy, backoff delay is backoffDelay*2^<numberOfRetries>.'
                    type: string
                  backoffPolicy:
                    description: BackoffPolicy is the retry backoff policy (linear,
                      exponential).
                    type: string
                  deadLetterSink:
                    description: DeadLetterSink is the sink receiving event that could
                      not be sent to a destination.
                    properties:
                      ref:
                        description: Ref points to an Addressable.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                              This is optional field, it gets defaulted to the object
                              holding it if left out.'
                            type: string
                        type: object
                      uri:
                        description: URI can be an absolute URL(non-empty scheme and
                          non-empty host) pointing to the target or a relative URI.
                          Relative URIs will be resolved using the base URI retrieved
                          from Ref.
                        type: string
                    type: object
                  retry:
                    description: Retry is the minimum number of retries the sender
                      should attempt when sending an event before moving it to the
                      dead letter sink.
                    format: int32
                    type: integer
                type: object
              reply:
                description: Reply specifies (optionally) how to handle events returned
                  from the Subscriber target.
                properties:
                  ref:
                    description: Ref points to an Addressable.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          This is optional field, it gets defaulted to the object
                          holding it if left out.'
                        type: string
                    type: object
                  uri:
                    description: URI can be an absolute URL(non-empty scheme and non-empty
                      host) pointing to the target or a relative URI. Relative URIs
                      will be resolved using the base URI retrieved from Ref.
                    type: string
                type: object
              subscriber:
                description: Subscriber is reference to (optional) function for processing
                  events. Events from the Channel will be delivered here and replies
                  are sent to a Destination as specified by the Reply.
                properties:
                  ref:
                    description: Ref points to an Addressable.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          This is optional field, it gets defaulted to the object
                          holding it if left out.'
                        type: string
                    type: object
                  uri:
                    description: URI can be an absolute URL(non-empty scheme and non-empty
                      host) pointing to the target or a relative URI. Relative URIs
                      will be resolved using the base URI retrieved from Ref.
                    type: string
                type: object
            type: object
          status:
            description: Status (computed) for a subscription
            properties:
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the 'Generation' of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
              physicalSubscription:
                description: PhysicalSubscription is the fully resolved values that
                  this Subscription represents.
                properties:
                  deadLetterSinkUri:
                    description: ReplyURI is the fully resolved URI for the spec.delivery.deadLetterSink.
                    type: string
                  replyUri:
                    description: ReplyURI is the fully resolved URI for the spec.reply.
                    type: string
                  subscriberUri:
                    description: SubscriberURI is the fully resolved URI for spec.subscriber.
                    type: string
                type: object
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        description: Subscription routes events received on a Channel to a DNS name
          and corresponds to the subscriptions.channels.knative.dev CRD.
        properties:
          spec:
            description: |-
              Specifies the Channel for incoming events, a Subscriber target for processing those events and where to put the result of the processing. Only From (where the events are coming from) is always required. You can optionally only Process the events (results in no output events) by leaving out the Result. You can also perform an identity transformation on the incoming events by leaving out the Subscriber and only specifying Result.
              The following are all valid specifications: channel --[subscriber]--> reply Sink, no outgoing events: channel -- subscriber no-op function (identity transformation): channel --> reply
            properties:
              channel:
                description: 'Reference to a channel that will be used to create the
                  subscription You can specify only the following fields of the ObjectReference:
                  - Kind - APIVersion - Name The resource pointed by this ObjectReference
                  must meet the contract to the ChannelableSpec duck type. If the
                  resource does not meet this contract it will be reflected in the
                  Subscription''s status.  This field is immutable. We have no good
                  answer on what happens to the events that are currently in the channel
                  being consumed from and what the semantics there should be. For
                  now, you can always delete the Subscription and recreate it to point
                  to a different channel, giving the user more control over what semantics
                  should be used (drain the channel first, possibly have events dropped,
                  etc.)'
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
              delivery:
                description: Delivery configuration
                properties:
                  backoffDelay:
                    description: 'BackoffDelay is the delay before retrying. More
                      information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html
                      - https://en.wikipedia.org/wiki/ISO_8601  For linear policy,
                      backoff delay is backoffDelay*<numberOfRetries>. For exponential
                      policy, backoff delay is backoffDelay*2^<numberOfRetries>.'
                    type: string
                  backoffPolicy:
                    description: BackoffPolicy is the retry backoff policy (linear,
                      exponential).
                    type: string
                  deadLetterSink:
                    description: DeadLetterSink is the sink receiving event that could
                      not be sent to a destination.
                    properties:
                      ref:
                        description: Ref points to an Addressable.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                              This is optional field, it gets defaulted to the object
                              holding it if left out.'
                            type: string
                        type: object
                      uri:
                        description: URI can be an absolute URL(non-empty scheme and
                          non-empty host) pointing to the target or a relative URI.
                          Relative URIs will be resolved using the base URI retrieved
                          from Ref.
                        type: string
                    type: object
                  retry:
                    description: Retry is the minimum number of retries the sender
                      should attempt when sending an event before moving it to the
                      dead letter sink.
                    format: int32
                    type: integer
                type: object
              reply:
                description: Reply specifies (optionally) how to handle events returned
                  from the Subscriber target.
                properties:
                  ref:
                    description: Ref points to an Addressable.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          This is optional field, it gets defaulted to the object
                          holding it if left out.'
                        type: string
                    type: object
                  uri:
                    description: URI can be an absolute URL(non-empty scheme and non-empty
                      host) pointing to the target or a relative URI. Relative URIs
                      will be resolved using the base URI retrieved from Ref.
                    type: string
                type: object
              subscriber:
                description: Subscriber is reference to (optional) function for processing
                  events. Events from the Channel will be delivered here and replies
                  are sent to a Destination as specified by the Reply.
                properties:
                  ref:
                    description: Ref points to an Addressable.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          This is optional field, it gets defaulted to the object
                          holding it if left out.'
                        type: string
                    type: object
                  uri:
                    description: URI can be an absolute URL(non-empty scheme and non-empty
                      host) pointing to the target or a relative URI. Relative URIs
                      will be resolved using the base URI retrieved from Ref.
                    type: string
                type: object
            type: object
          status:
            description: Status (computed) for a subscription
            properties:
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the 'Generation' of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
              physicalSubscription:
                description: PhysicalSubscription is the fully resolved values that
                  this Subscription represents.
                properties:
                  deadLetterSinkUri:
                    description: ReplyURI is the fully resolved URI for the spec.delivery.deadLetterSink.
                    type: string
                  replyUri:
                    description: ReplyURI is the fully resolved URI for the spec.reply.
                    type: string
                  subscriberUri:
                    description: SubscriberURI is the fully resolved URI for spec.subscriber.
                    type: string
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    knative.dev/crd-install: "true"
    kustomize.component: knative
  name: triggers.eventing.knative.dev
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: eventing-webhook
          namespace: knative-eventing
      conversionReviewVersions:
      - v1
      - v1beta1
  group: eventing.knative.dev
  names:
    categories:
    - all
    - knative
    - eventing
    kind: Trigger
    plural: triggers
    singular: trigger
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.broker
      name: Broker
      type: string
    - jsonPath: .status.subscriberUri
      name: Subscriber_URI
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        properties:
          spec:
            description: Spec defines the desired state of the Trigger.
            properties:
              broker:
                description: Broker is the broker that this trigger receives events
                  from. If not specified, will default to ''default''.'
                type: string
              delivery:
                description: Delivery contains the delivery spec for this specific
                  trigger.
                properties:
                  backoffDelay:
                    description: 'BackoffDelay is the delay before retrying. More
                      information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html
                      - https://en.wikipedia.org/wiki/ISO_8601  For linear policy,
                      backoff delay is backoffDelay*<numberOfRetries>. For exponential
                      policy, backoff delay is backoffDelay*2^<numberOfRetries>.'
                    type: string
                  backoffPolicy:
                    description: BackoffPolicy is the retry backoff policy (linear,
                      exponential).
                    type: string
                  deadLetterSink:
                    description: DeadLetterSink is the sink receiving event that could
                      not be sent to a destination.
                    properties:
                      ref:
                        description: Ref points to an Addressable.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                              This is optional field, it gets defaulted to the object
                              holding it if left out.'
                            type: string
                        type: object
                      uri:
                        description: URI can be an absolute URL(non-empty scheme and
                          non-empty host) pointing to the target or a relative URI.
                          Relative URIs will be resolved using the base URI retrieved
                          from Ref.
                        type: string
                    type: object
                  retry:
                    description: Retry is the minimum number of retries the sender
                      should attempt when sending an event before moving it to the
                      dead letter sink.
                    format: int32
                    type: integer
                type: object
              filter:
                description: 'Filter is the filter to apply against all events from
                  the Broker. Only events that pass this filter will be sent to the
                  Subscriber. If not specified, will default to allowing all events. '
                properties:
                  attributes:
                    description: 'Attributes filters events by exact match on event
                      context attributes. Each key in the map is compared with the
                      equivalent key in the event context. An event passes the filter
                      if all values are equal to the specified values.  Nested context
                      attributes are not supported as keys. Only string values are
                      supported. '
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                type: object
              subscriber:
                description: Subscriber is the addressable that receives events from
                  the Broker that pass the Filter. It is required.
                properties:
                  ref:
                    description: Ref points to an Addressable.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          This is optional field, it gets defaulted to the object
                          holding it if left out.'
                        type: string
                    type: object
                  uri:
                    description: URI can be an absolute URL(non-empty scheme and non-empty
                      host) pointing to the target or a relative URI. Relative URIs
                      will be resolved using the base URI retrieved from Ref.
                    type: string
                type: object
            type: object
          status:
            description: Status represents the current state of the Trigger. This
              data may be out of date.
            properties:
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  required:
                  - type
                  - status
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the 'Generation' of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
              subscriberUri:
                description: SubscriberURI is the resolved URI of the receiver for
                  this Trigger.
                type: string
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .spec.broker
      name: Broker
      type: string
    - jsonPath: .status.subscriberUri
      name: Subscriber_URI
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].reason
      name: Reason
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        description: Trigger represents a request to have events delivered to a subscriber
          from a Broker's event pool.
        properties:
          spec:
            description: Spec defines the desired state of the Trigger.
            properties:
              broker:
                description: Broker is the broker that this trigger receives events
                  from.
                type: string
              delivery:
                description: Delivery contains the delivery spec for this specific
                  trigger.
                properties:
                  backoffDelay:
                    description: 'BackoffDelay is the delay before retrying. More
                      information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html
                      - https://en.wikipedia.org/wiki/ISO_8601  For linear policy,
                      backoff delay is backoffDelay*<numberOfRetries>. For exponential
                      policy, backoff delay is backoffDelay*2^<numberOfRetries>.'
                    type: string
                  backoffPolicy:
                    description: BackoffPolicy is the retry backoff policy (linear,
                      exponential).
                    type: string
                  deadLetterSink:
                    description: DeadLetterSink is the sink receiving event that could
                      not be sent to a destination.
                    properties:
                      ref:
                        description: Ref points to an Addressable.
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                              This is optional field, it gets defaulted to the object
                              holding it if left out.'
                            type: string
                        type: object
                      uri:
                        description: URI can be an absolute URL(non-empty scheme and
                          non-empty host) pointing to the target or a relative URI.
                          Relative URIs will be resolved using the base URI retrieved
                          from Ref.
                        type: string
                    type: object
                  retry:
                    description: Retry is the minimum number of retries the sender
                      should attempt when sending an event before moving it to the
                      dead letter sink.
                    format: int32
                    type: integer
                type: object
              filter:
                description: 'Filter is the filter to apply against all events from
                  the Broker. Only events that pass this filter will be sent to the
                  Subscriber. If not specified, will default to allowing all events. '
                properties:
                  attributes:
                    description: 'Attributes filters events by exact match on event
                      context attributes. Each key in the map is compared with the
                      equivalent key in the event context. An event passes the filter
                      if all values are equal to the specified values.  Nested context
                      attributes are not supported as keys. Only string values are
                      supported. '
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                type: object
              subscriber:
                description: Subscriber is the addressable that receives events from
                  the Broker that pass the Filter. It is required.
                properties:
                  ref:
                    description: Ref points to an Addressable.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          This is optional field, it gets defaulted to the object
                          holding it if left out.'
                        type: string
                    type: object
                  uri:
                    description: URI can be an absolute URL(non-empty scheme and non-empty
                      host) pointing to the target or a relative URI. Relative URIs
                      will be resolved using the base URI retrieved from Ref.
                    type: string
                type: object
            type: object
          status:
            description: Status represents the current state of the Trigger. This
              data may be out of date.
            properties:
              annotations:
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  required:
                  - type
                  - status
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the 'Generation' of the Service
                  that was last processed by the controller.
                format: int64
                type: integer
              subscriberUri:
                description: SubscriberURI is the resolved URI of the receiver for
                  this Trigger.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: authcodes.dex.coreos.com
spec:
  group: dex.coreos.com
  names:
    kind: AuthCode
    listKind: AuthCodeList
    plural: authcodes
    singular: authcode
  scope: Namespaced
  version: v1
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dex
  namespace: auth
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: cluster-local-gateway
    install.operator.istio.io/owning-resource: unknown
    istio: cluster-local-gateway
    istio.io/rev: default
    operator.istio.io/component: IngressGateways
    release: istio
  name: cluster-local-gateway-service-account
  namespace: istio-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: eventing-controller
  namespace: knative-eventing
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: eventing-webhook
  namespace: knative-eventing
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: imc-controller
  namespace: knative-eventing
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: imc-dispatcher
  namespace: knative-eventing
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: mt-broker-filter
  namespace: knative-eventing
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: mt-broker-ingress
  namespace: knative-eventing
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: pingsource-mt-adapter
  namespace: knative-eventing
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    serving.knative.dev/release: v0.22.1
  name: controller
  namespace: knative-serving
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    install.operator.istio.io/owning-resource: unknown
    istio.io/rev: default
    operator.istio.io/component: IngressGateways
    release: istio
  name: cluster-local-gateway-sds
  namespace: istio-system
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - watch
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: knative-eventing-webhook
  namespace: knative-eventing
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
  - update
  - list
  - watch
  - patch
---
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      duck.knative.dev/addressable: "true"
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: addressable-resolver
rules: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    duck.knative.dev/addressable: "true"
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: broker-addressable-resolver
rules:
- apiGroups:
  - eventing.knative.dev
  resources:
  - brokers
  - brokers/status
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    duck.knative.dev/podspecable: "true"
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: builtin-podspecable-binding
rules:
- apiGroups:
  - apps
  resources:
  - deployments
  - daemonsets
  - statefulsets
  - replicasets
  verbs:
  - list
  - watch
  - patch
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - list
  - watch
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    duck.knative.dev/addressable: "true"
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: channel-addressable-resolver
rules:
- apiGroups:
  - messaging.knative.dev
  resources:
  - channels
  - channels/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - messaging.knative.dev
  resources:
  - channels/finalizers
  verbs:
  - update
---
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      duck.knative.dev/channelable: "true"
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: channelable-manipulator
rules: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: eventing-broker-filter
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - eventing.knative.dev
  resources:
  - triggers
  - triggers/status
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: eventing-broker-ingress
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: eventing-config-reader
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    duck.knative.dev/source: "true"
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: eventing-sources-source-observer
rules:
- apiGroups:
  - sources.knative.dev
  resources:
  - apiserversources
  - pingsources
  - sinkbindings
  - containersources
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    duck.knative.dev/addressable: "true"
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: flows-addressable-resolver
rules:
- apiGroups:
  - flows.knative.dev
  resources:
  - sequences
  - sequences/status
  - parallels
  - parallels/status
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    duck.knative.dev/addressable: "true"
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: imc-addressable-resolver
rules:
- apiGroups:
  - messaging.knative.dev
  resources:
  - inmemorychannels
  - inmemorychannels/status
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    duck.knative.dev/channelable: "true"
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: imc-channelable-manipulator
rules:
- apiGroups:
  - messaging.knative.dev
  resources:
  - inmemorychannels
  - inmemorychannels/status
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: imc-controller
rules:
- apiGroups:
  - messaging.knative.dev
  resources:
  - inmemorychannels
  - inmemorychannels/status
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - messaging.knative.dev
  resources:
  - inmemorychannels/finalizers
  verbs:
  - update
- apiGroups:
  - messaging.knative.dev
  resources:
  - inmemorychannels/finalizers
  - inmemorychannels/status
  - inmemorychannels
  verbs:
  - patch
- apiGroups:
  - ""
  resources:
  - services
  - serviceaccounts
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - rolebindings
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
- apiGroups:
  - apps
  resources:
  - deployments/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: imc-dispatcher
rules:
- apiGroups:
  - messaging.knative.dev
  resources:
  - inmemorychannels
  - inmemorychannels/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - messaging.knative.dev
  resources:
  - inmemorychannels/finalizers
  - inmemorychannels/status
  - inmemorychannels
  verbs:
  - patch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-admin: "true"
  name: knative-bindings-namespaced-admin
rules:
- apiGroups:
  - bindings.knative.dev
  resources:
  - '*'
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: knative-eventing-controller
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  - secrets
  - configmaps
  - services
  - endpoints
  - events
  - serviceaccounts
  - pods
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - apps
  resources:
  - deployments/finalizers
  verbs:
  - update
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - rolebindings
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - eventing.knative.dev
  resources:
  - brokers
  - brokers/status
  - triggers
  - triggers/status
  - eventtypes
  - eventtypes/status
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - eventing.knative.dev
  resources:
  - brokers/finalizers
  - triggers/finalizers
  verbs:
  - update
- apiGroups:
  - messaging.knative.dev
  resources:
  - sequences
  - sequences/status
  - channels
  - channels/status
  - parallels
  - parallels/status
  - subscriptions
  - subscriptions/status
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - flows.knative.dev
  resources:
  - sequences
  - sequences/status
  - parallels
  - parallels/status
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - messaging.knative.dev
  resources:
  - sequences/finalizers
  - parallels/finalizers
  - channels/finalizers
  verbs:
  - update
- apiGroups:
  - flows.knative.dev
  resources:
  - sequences/finalizers
  - parallels/finalizers
  verbs:
  - update
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: knative-eventing-mt-broker-filter
rules:
- apiGroups:
  - eventing.knative.dev
  resources:
  - triggers
  - triggers/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: knative-eventing-mt-broker-ingress
rules:
- apiGroups:
  - eventing.knative.dev
  resources:
  - brokers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: knative-eventing-mt-channel-broker-controller
rules:
- apiGroups:
  - ""
  resources:
  - namespaces/finalizers
  verbs:
  - update
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-admin: "true"
  name: knative-eventing-namespaced-admin
rules:
- apiGroups:
  - eventing.knative.dev
  resources:
  - '*'
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-edit: "true"
  name: knative-eventing-namespaced-edit
rules:
- apiGroups:
  - eventing.knative.dev
  - messaging.knative.dev
  - sources.knative.dev
  - flows.knative.dev
  - bindings.knative.dev
  resources:
  - '*'
  verbs:
  - create
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
    rbac.authorization.k8s.io/aggregate-to-view: "true"
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-view: "true"
  name: knative-eventing-namespaced-view
rules:
- apiGroups:
  - eventing.knative.dev
  - messaging.knative.dev
  - sources.knative.dev
  - flows.knative.dev
  - bindings.knative.dev
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: knative-eventing-pingsource-mt-adapter
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - sources.knative.dev
  resources:
  - pingsources
  - pingsources/status
  verbs:
  - get
  - list
  - watch
  - patch
- apiGroups:
  - sources.knative.dev
  resources:
  - pingsources/finalizers
  verbs:
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: knative-eventing-sources-controller
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  - configmaps
  - services
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - sources.knative.dev
  resources:
  - sinkbindings
  - sinkbindings/status
  - sinkbindings/finalizers
  - apiserversources
  - apiserversources/status
  - apiserversources/finalizers
  - pingsources
  - pingsources/status
  - pingsources/finalizers
  - containersources
  - containersources/status
  - containersources/finalizers
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - serving.knative.dev
  resources:
  - services
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - eventing.knative.dev
  resources:
  - eventtypes
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: knative-eventing-webhook
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - create
  - update
  - list
  - watch
  - patch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
- apiGroups:
  - apps
  resources:
  - deployments/finalizers
  verbs:
  - update
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  - validatingwebhookconfigurations
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - sources.knative.dev
  resources:
  - sinkbindings
  - sinkbindings/status
  - sinkbindings/finalizers
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-admin: "true"
  name: knative-flows-namespaced-admin
rules:
- apiGroups:
  - flows.knative.dev
  resources:
  - '*'
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-admin: "true"
  name: knative-messaging-namespaced-admin
rules:
- apiGroups:
  - messaging.knative.dev
  resources:
  - '*'
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    duck.knative.dev/addressable: "true"
    serving.knative.dev/release: v0.22.1
  name: knative-serving-addressable-resolver
rules:
- apiGroups:
  - serving.knative.dev
  resources:
  - routes
  - routes/status
  - services
  - services/status
  verbs:
  - get
  - list
  - watch
---
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      serving.knative.dev/controller: "true"
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    serving.knative.dev/release: v0.22.1
  name: knative-serving-admin
rules: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    serving.knative.dev/controller: "true"
    serving.knative.dev/release: v0.22.1
  name: knative-serving-core
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - namespaces
  - secrets
  - configmaps
  - endpoints
  - services
  - events
  - serviceaccounts
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints/restricted
  verbs:
  - create
- apiGroups:
  - apps
  resources:
  - deployments
  - deployments/finalizers
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  - validatingwebhookconfigurations
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  - customresourcedefinitions/status
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - serving.knative.dev
  - autoscaling.internal.knative.dev
  - networking.internal.knative.dev
  resources:
  - '*'
  - '*/status'
  - '*/finalizers'
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - deletecollection
  - patch
  - watch
- apiGroups:
  - caching.internal.knative.dev
  resources:
  - images
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    networking.knative.dev/ingress-provider: istio
    serving.knative.dev/controller: "true"
    serving.knative.dev/release: v0.22.1
  name: knative-serving-istio
rules:
- apiGroups:
  - networking.istio.io
  resources:
  - virtualservices
  - gateways
  - destinationrules
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-admin: "true"
    serving.knative.dev/release: v0.22.1
  name: knative-serving-namespaced-admin
rules:
- apiGroups:
  - serving.knative.dev
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - networking.internal.knative.dev
  - autoscaling.internal.knative.dev
  - caching.internal.knative.dev
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-edit: "true"
    serving.knative.dev/release: v0.22.1
  name: knative-serving-namespaced-edit
rules:
- apiGroups:
  - serving.knative.dev
  resources:
  - '*'
  verbs:
  - create
  - update
  - patch
  - delete
- apiGroups:
  - networking.internal.knative.dev
  - autoscaling.internal.knative.dev
  - caching.internal.knative.dev
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-view: "true"
    serving.knative.dev/release: v0.22.1
  name: knative-serving-namespaced-view
rules:
- apiGroups:
  - serving.knative.dev
  - networking.internal.knative.dev
  - autoscaling.internal.knative.dev
  - caching.internal.knative.dev
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    duck.knative.dev/podspecable: "true"
    serving.knative.dev/release: v0.22.1
  name: knative-serving-podspecable-binding
rules:
- apiGroups:
  - serving.knative.dev
  resources:
  - configurations
  - services
  verbs:
  - list
  - watch
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-admin: "true"
  name: knative-sources-namespaced-admin
rules:
- apiGroups:
  - sources.knative.dev
  resources:
  - '*'
  verbs:
  - '*'
---
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.authorization.kubeflow.org/aggregate-to-kubeflow-admin: "true"
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubeflow-admin
rules: []
---
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.authorization.kubeflow.org/aggregate-to-kubeflow-edit: "true"
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-admin: "true"
  name: kubeflow-edit
rules: []
---
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.authorization.kubeflow.org/aggregate-to-kubeflow-istio-admin: "true"
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-admin: "true"
  name: kubeflow-istio-admin
rules: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-edit: "true"
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-istio-admin: "true"
  name: kubeflow-istio-edit
rules:
- apiGroups:
  - istio.io
  - networking.istio.io
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - deletecollection
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-view: "true"
  name: kubeflow-istio-view
rules:
- apiGroups:
  - istio.io
  - networking.istio.io
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-admin: "true"
  name: kubeflow-kubernetes-admin
rules:
- apiGroups:
  - authorization.k8s.io
  resources:
  - localsubjectaccessreviews
  verbs:
  - create
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - rolebindings
  - roles
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-edit: "true"
  name: kubeflow-kubernetes-edit
rules:
- apiGroups:
  - ""
  resources:
  - pods/attach
  - pods/exec
  - pods/portforward
  - pods/proxy
  - secrets
  - services/proxy
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - impersonate
- apiGroups:
  - ""
  resources:
  - pods
  - pods/attach
  - pods/exec
  - pods/portforward
  - pods/proxy
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - persistentvolumeclaims
  - replicationcontrollers
  - replicationcontrollers/scale
  - secrets
  - serviceaccounts
  - services
  - services/proxy
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - apps
  resources:
  - daemonsets
  - deployments
  - deployments/rollback
  - deployments/scale
  - replicasets
  - replicasets/scale
  - statefulsets
  - statefulsets/scale
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - batch
  resources:
  - cronjobs
  - jobs
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - extensions
  resources:
  - daemonsets
  - deployments
  - deployments/rollback
  - deployments/scale
  - ingresses
  - networkpolicies
  - replicasets
  - replicasets/scale
  - replicationcontrollers/scale
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  - networkpolicies
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-view: "true"
  name: kubeflow-kubernetes-view
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - persistentvolumeclaims
  - persistentvolumeclaims/status
  - pods
  - replicationcontrollers
  - replicationcontrollers/scale
  - serviceaccounts
  - services
  - services/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - bindings
  - events
  - limitranges
  - namespaces/status
  - pods/log
  - pods/status
  - replicationcontrollers/status
  - resourcequotas
  - resourcequotas/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - controllerrevisions
  - daemonsets
  - daemonsets/status
  - deployments
  - deployments/scale
  - deployments/status
  - replicasets
  - replicasets/scale
  - replicasets/status
  - statefulsets
  - statefulsets/scale
  - statefulsets/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  - horizontalpodautoscalers/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - batch
  resources:
  - cronjobs
  - cronjobs/status
  - jobs
  - jobs/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - daemonsets
  - daemonsets/status
  - deployments
  - deployments/scale
  - deployments/status
  - ingresses
  - ingresses/status
  - networkpolicies
  - replicasets
  - replicasets/scale
  - replicasets/status
  - replicationcontrollers/scale
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  - poddisruptionbudgets/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  - ingresses/status
  - networkpolicies
  verbs:
  - get
  - list
  - watch
---
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.authorization.kubeflow.org/aggregate-to-kubeflow-view: "true"
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.kubeflow.org/aggregate-to-kubeflow-edit: "true"
  name: kubeflow-view
rules: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    duck.knative.dev/addressable: "true"
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: messaging-addressable-resolver
rules:
- apiGroups:
  - messaging.knative.dev
  resources:
  - sequences
  - sequences/status
  - parallels
  - parallels/status
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    duck.knative.dev/channelable: "true"
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: meta-channelable-manipulator
rules:
- apiGroups:
  - messaging.knative.dev
  resources:
  - channels
  - channels/status
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
---
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      duck.knative.dev/podspecable: "true"
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: podspecable-binding
rules: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    duck.knative.dev/addressable: "true"
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: service-addressable-resolver
rules:
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    duck.knative.dev/addressable: "true"
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: serving-addressable-resolver
rules:
- apiGroups:
  - serving.knative.dev
  resources:
  - routes
  - routes/status
  - services
  - services/status
  verbs:
  - get
  - list
  - watch
---
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      duck.knative.dev/source: "true"
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: source-observer
rules: []
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: dex
rules:
- apiGroups:
  - dex.coreos.com
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    install.operator.istio.io/owning-resource: unknown
    istio.io/rev: default
    operator.istio.io/component: IngressGateways
    release: istio
  name: cluster-local-gateway-sds
  namespace: istio-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cluster-local-gateway-sds
subjects:
- kind: ServiceAccount
  name: cluster-local-gateway-service-account
  namespace: istio-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: eventing-webhook
  namespace: knative-eventing
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: knative-eventing-webhook
subjects:
- kind: ServiceAccount
  name: eventing-webhook
  namespace: knative-eventing
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: eventing-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: knative-eventing-controller
subjects:
- kind: ServiceAccount
  name: eventing-controller
  namespace: knative-eventing
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: eventing-controller-manipulator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: channelable-manipulator
subjects:
- kind: ServiceAccount
  name: eventing-controller
  namespace: knative-eventing
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: eventing-controller-resolver
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: addressable-resolver
subjects:
- kind: ServiceAccount
  name: eventing-controller
  namespace: knative-eventing
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: eventing-controller-source-observer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: source-observer
subjects:
- kind: ServiceAccount
  name: eventing-controller
  namespace: knative-eventing
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: eventing-controller-sources-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: knative-eventing-sources-controller
subjects:
- kind: ServiceAccount
  name: eventing-controller
  namespace: knative-eventing
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: eventing-mt-channel-broker-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: knative-eventing-mt-channel-broker-controller
subjects:
- kind: ServiceAccount
  name: eventing-controller
  namespace: knative-eventing
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: eventing-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: knative-eventing-webhook
subjects:
- kind: ServiceAccount
  name: eventing-webhook
  namespace: knative-eventing
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: eventing-webhook-podspecable-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: podspecable-binding
subjects:
- kind: ServiceAccount
  name: eventing-webhook
  namespace: knative-eventing
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: eventing-webhook-resolver
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: addressable-resolver
subjects:
- kind: ServiceAccount
  name: eventing-webhook
  namespace: knative-eventing
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: imc-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: imc-controller
subjects:
- kind: ServiceAccount
  name: imc-controller
  namespace: knative-eventing
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: imc-dispatcher
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: imc-dispatcher
subjects:
- kind: ServiceAccount
  name: imc-dispatcher
  namespace: knative-eventing
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: knative-eventing-mt-broker-filter
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: knative-eventing-mt-broker-filter
subjects:
- kind: ServiceAccount
  name: mt-broker-filter
  namespace: knative-eventing
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: knative-eventing-mt-broker-ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: knative-eventing-mt-broker-ingress
subjects:
- kind: ServiceAccount
  name: mt-broker-ingress
  namespace: knative-eventing
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: knative-eventing-pingsource-mt-adapter
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: knative-eventing-pingsource-mt-adapter
subjects:
- kind: ServiceAccount
  name: pingsource-mt-adapter
  namespace: knative-eventing
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    serving.knative.dev/release: v0.22.1
  name: knative-serving-controller-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: knative-serving-admin
subjects:
- kind: ServiceAccount
  name: controller
  namespace: knative-serving
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: dex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dex
subjects:
- kind: ServiceAccount
  name: dex
  namespace: auth
---
apiVersion: v1
data:
  config.yaml: |
    issuer: http://dex.auth.svc.cluster.local:5556/dex
    storage:
      type: kubernetes
      config:
        inCluster: true
    web:
      http: 0.0.0.0:5556
    logger:
      level: "debug"
      format: text
    oauth2:
      skipApprovalScreen: true
    enablePasswordDB: true
    staticPasswords:
    - email: user@example.com
      hash: $2y$12$4K/VkmDd1q1Orb3xAt82zu8gk7Ad6ReFR4LCP9UeYE90NLiN9Df72
      # https://github.com/dexidp/dex/pull/1601/commits
      # FIXME: Use hashFromEnv instead
      username: user
      userID: "15841185641784"
    staticClients:
    # https://github.com/dexidp/dex/pull/1664
    - idEnv: OIDC_CLIENT_ID
      redirectURIs: ["/login/oidc"]
      name: 'Dex Login Application'
      secretEnv: OIDC_CLIENT_SECRET
kind: ConfigMap
metadata:
  name: dex
  namespace: auth
---
apiVersion: v1
data:
  OIDC_AUTH_URL: /dex/auth
  OIDC_PROVIDER: http://dex.auth.svc.cluster.local:5556/dex
  OIDC_SCOPES: profile email groups
  PORT: '"8080"'
  REDIRECT_URL: /login/oidc
  SKIP_AUTH_URI: /dex
  STORE_PATH: /var/lib/authservice/data.db
  USERID_CLAIM: email
  USERID_HEADER: kubeflow-userid
  USERID_PREFIX: ""
kind: ConfigMap
metadata:
  name: oidc-authservice-parameters
  namespace: istio-system
---
apiVersion: v1
data:
  channelTemplateSpec: |
    apiVersion: messaging.knative.dev/v1
    kind: InMemoryChannel
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: config-br-default-channel
  namespace: knative-eventing
---
apiVersion: v1
data:
  default-br-config: |
    clusterDefault:
      brokerClass: MTChannelBasedBroker
      apiVersion: v1
      kind: ConfigMap
      name: config-br-default-channel
      namespace: knative-eventing
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: config-br-defaults
  namespace: knative-eventing
---
apiVersion: v1
data:
  MaxIdleConnections: "1000"
  MaxIdleConnectionsPerHost: "100"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: config-imc-event-dispatcher
  namespace: knative-eventing
---
apiVersion: v1
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.

    # leaseDuration is how long non-leaders will wait to try to acquire the
    # lock; 15 seconds is the value used by core kubernetes controllers.
    leaseDuration: "15s"

    # renewDeadline is how long a leader will try to renew the lease before
    # giving up; 10 seconds is the value used by core kubernetes controllers.
    renewDeadline: "10s"

    # retryPeriod is how long the leader election client waits between tries of
    # actions; 2 seconds is the value used by core kubernetes controllers.
    retryPeriod: "2s"

    # buckets is the number of buckets used to partition key space of each
    # Reconciler. If this number is M and the replica number of the controller
    # is N, the N replicas will compete for the M buckets. The owner of a
    # bucket will take care of the reconciling for the keys partitioned into
    # that bucket.
    buckets: "1"
kind: ConfigMap
metadata:
  annotations:
    knative.dev/example-checksum: 96896b00
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: config-leader-election
  namespace: knative-eventing
---
apiVersion: v1
data:
  loglevel.controller: info
  loglevel.webhook: info
  zap-logger-config: |
    {
      "level": "info",
      "development": false,
      "outputPaths": ["stdout"],
      "errorOutputPaths": ["stderr"],
      "encoding": "json",
      "encoderConfig": {
        "timeKey": "ts",
        "levelKey": "level",
        "nameKey": "logger",
        "callerKey": "caller",
        "messageKey": "msg",
        "stacktraceKey": "stacktrace",
        "lineEnding": "",
        "levelEncoder": "",
        "timeEncoder": "iso8601",
        "durationEncoder": "",
        "callerEncoder": ""
      }
    }
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    knative.dev/config-category: eventing
    knative.dev/config-propagation: original
    kustomize.component: knative
  name: config-logging
  namespace: knative-eventing
---
apiVersion: v1
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.

    # metrics.backend-destination field specifies the system metrics destination.
    # It supports either prometheus (the default) or stackdriver.
    # Note: Using stackdriver will incur additional charges
    metrics.backend-destination: prometheus

    # metrics.request-metrics-backend-destination specifies the request metrics
    # destination. If non-empty, it enables queue proxy to send request metrics.
    # Currently supported values: prometheus, stackdriver.
    metrics.request-metrics-backend-destination: prometheus

    # metrics.stackdriver-project-id field specifies the stackdriver project ID. This
    # field is optional. When running on GCE, application default credentials will be
    # used if this field is not provided.
    metrics.stackdriver-project-id: "<your stackdriver project id>"

    # metrics.allow-stackdriver-custom-metrics indicates whether it is allowed to send metrics to
    # Stackdriver using "global" resource type and custom metric type if the
    # metrics are not supported by "knative_broker", "knative_trigger", and "knative_source" resource types.
    # Setting this flag to "true" could cause extra Stackdriver charge.
    # If metrics.backend-destination is not Stackdriver, this is ignored.
    metrics.allow-stackdriver-custom-metrics: "false"

    # profiling.enable indicates whether it is allowed to retrieve runtime profiling data from
    # the pods via an HTTP server in the format expected by the pprof visualization tool. When
    # enabled, the Knative Eventing pods expose the profiling data on an alternate HTTP port 8008.
    # The HTTP context root for profiling is then /debug/pprof/.
    profiling.enable: "false"

    # sink-event-error-reporting.enable whether the adapter reports a kube event to the CRD indicating
    # a failure to send a cloud event to the sink.
    sink-event-error-reporting.enable: "false"
kind: ConfigMap
metadata:
  annotations:
    knative.dev/example-checksum: f46cf09d
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    knative.dev/config-category: eventing
    knative.dev/config-propagation: original
    kustomize.component: knative
  name: config-observability
  namespace: knative-eventing
---
apiVersion: v1
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.

    # Max number of bytes allowed to be sent for message excluding any
    # base64 decoding. Default is no limit set for data
    dataMaxSize: -1
kind: ConfigMap
metadata:
  annotations:
    knative.dev/example-checksum: f8e5a744
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: config-ping-defaults
  namespace: knative-eventing
---
apiVersion: v1
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################
    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.
    #
    # This may be "zipkin" or "stackdriver", the default is "none"
    backend: "none"

    # URL to zipkin collector where traces are sent.
    # This must be specified when backend is "zipkin"
    zipkin-endpoint: "http://zipkin.istio-system.svc.cluster.local:9411/api/v2/spans"

    # The GCP project into which stackdriver metrics will be written
    # when backend is "stackdriver".  If unspecified, the project-id
    # is read from GCP metadata when running on GCP.
    stackdriver-project-id: "my-project"

    # Enable zipkin debug mode. This allows all spans to be sent to the server
    # bypassing sampling.
    debug: "false"

    # Percentage (0-1) of requests to trace
    sample-rate: "0.1"
kind: ConfigMap
metadata:
  annotations:
    knative.dev/example-checksum: 4002b4c2
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    knative.dev/config-category: eventing
    knative.dev/config-propagation: original
    kustomize.component: knative
  name: config-tracing
  namespace: knative-eventing
---
apiVersion: v1
data:
  default-ch-config: |
    clusterDefault:
      apiVersion: messaging.knative.dev/v1
      kind: InMemoryChannel
    namespaceDefaults:
      some-namespace:
        apiVersion: messaging.knative.dev/v1
        kind: InMemoryChannel
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: default-ch-webhook
  namespace: knative-eventing
---
apiVersion: v1
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.

    # revision-timeout-seconds contains the default number of
    # seconds to use for the revision's per-request timeout, if
    # none is specified.
    revision-timeout-seconds: "300"  # 5 minutes

    # max-revision-timeout-seconds contains the maximum number of
    # seconds that can be used for revision-timeout-seconds.
    # This value must be greater than or equal to revision-timeout-seconds.
    # If omitted, the system default is used (600 seconds).
    #
    # If this value is increased, the activator's terminationGraceTimeSeconds
    # should also be increased to prevent in-flight requests being disrupted.
    max-revision-timeout-seconds: "600"  # 10 minutes

    # revision-cpu-request contains the cpu allocation to assign
    # to revisions by default.  If omitted, no value is specified
    # and the system default is used.
    # Below is an example of setting revision-cpu-request.
    # By default, it is not set by Knative.
    revision-cpu-request: "400m"  # 0.4 of a CPU (aka 400 milli-CPU)

    # revision-memory-request contains the memory allocation to assign
    # to revisions by default.  If omitted, no value is specified
    # and the system default is used.
    # Below is an example of setting revision-memory-request.
    # By default, it is not set by Knative.
    revision-memory-request: "100M"  # 100 megabytes of memory

    # revision-ephemeral-storage-request contains the ephemeral storage
    # allocation to assign to revisions by default.  If omitted, no value is
    # specified and the system default is used.
    revision-ephemeral-storage-request: "500M"  # 500 megabytes of storage

    # revision-cpu-limit contains the cpu allocation to limit
    # revisions to by default.  If omitted, no value is specified
    # and the system default is used.
    # Below is an example of setting revision-cpu-limit.
    # By default, it is not set by Knative.
    revision-cpu-limit: "1000m"  # 1 CPU (aka 1000 milli-CPU)

    # revision-memory-limit contains the memory allocation to limit
    # revisions to by default.  If omitted, no value is specified
    # and the system default is used.
    # Below is an example of setting revision-memory-limit.
    # By default, it is not set by Knative.
    revision-memory-limit: "200M"  # 200 megabytes of memory

    # revision-ephemeral-storage-limit contains the ephemeral storage
    # allocation to limit revisions to by default.  If omitted, no value is
    # specified and the system default is used.
    revision-ephemeral-storage-limit: "750M"  # 750 megabytes of storage

    # container-name-template contains a template for the default
    # container name, if none is specified.  This field supports
    # Go templating and is supplied with the ObjectMeta of the
    # enclosing Service or Configuration, so values such as
    # {{.Name}} are also valid.
    container-name-template: "user-container"

    # container-concurrency specifies the maximum number
    # of requests the Container can handle at once, and requests
    # above this threshold are queued.  Setting a value of zero
    # disables this throttling and lets through as many requests as
    # the pod receives.
    container-concurrency: "0"

    # The container concurrency max limit is an operator setting ensuring that
    # the individual revisions cannot have arbitrary large concurrency
    # values, or autoscaling targets. `container-concurrency` default setting
    # must be at or below this value.
    #
    # Must be greater than 1.
    #
    # Note: even with this set, a user can choose a containerConcurrency
    # of 0 (i.e. unbounded) unless allow-container-concurrency-zero is
    # set to "false".
    container-concurrency-max-limit: "1000"

    # allow-container-concurrency-zero controls whether users can
    # specify 0 (i.e. unbounded) for containerConcurrency.
    allow-container-concurrency-zero: "true"

    # enable-service-links specifies the default value used for the
    # enableServiceLinks field of the PodSpec, when it is omitted by the user.
    # See: https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/#accessing-the-service
    #
    # This is a tri-state flag with possible values of (true|false|default).
    #
    # In environments with large number of services it is suggested
    # to set this value to `false`.
    # See https://github.com/knative/serving/issues/8498.
    enable-service-links: "false"
kind: ConfigMap
metadata:
  annotations:
    knative.dev/example-checksum: cdabec96
  labels:
    serving.knative.dev/release: v0.22.1
  name: config-defaults
  namespace: knative-serving
---
apiVersion: v1
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.

    # List of repositories for which tag to digest resolving should be skipped
    registriesSkippingTagResolving: "kind.local,ko.local,dev.local"

    # digestResolutionTimeout is the maximum time allowed for an image's
    # digests to be resolved.
    digestResolutionTimeout: "10s"

    # ProgressDeadline is the duration we wait for the deployment to
    # be ready before considering it failed.
    progressDeadline: "600s"

    # queueSidecarCPURequest is the requests.cpu to set for the queue proxy sidecar container.
    # If omitted, a default value (currently "25m"), is used.
    queueSidecarCPURequest: "25m"

    # queueSidecarCPULimit is the limits.cpu to set for the queue proxy sidecar container.
    # If omitted, no value is specified and the system default is used.
    queueSidecarCPULimit: "1000m"

    # queueSidecarMemoryRequest is the requests.memory to set for the queue proxy container.
    # If omitted, no value is specified and the system default is used.
    queueSidecarMemoryRequest: "400Mi"

    # queueSidecarMemoryLimit is the limits.memory to set for the queue proxy container.
    # If omitted, no value is specified and the system default is used.
    queueSidecarMemoryLimit: "800Mi"

    # queueSidecarEphemeralStorageRequest is the requests.ephemeral-storage to
    # set for the queue proxy sidecar container.
    # If omitted, no value is specified and the system default is used.
    queueSidecarEphemeralStorageRequest: "512Mi"

    # queueSidecarEphemeralStorageLimit is the limits.ephemeral-storage to set
    # for the queue proxy sidecar container.
    # If omitted, no value is specified and the system default is used.
    queueSidecarEphemeralStorageLimit: "1024Mi"
  progressDeadline: 600s
  queueSidecarImage: gcr.io/knative-releases/knative.dev/serving/cmd/queue@sha256:0b8e031170354950f3395876961452af1c62f7ab5161c9e71867392c11881962
kind: ConfigMap
metadata:
  annotations:
    knative.dev/example-checksum: fa67b403
  labels:
    serving.knative.dev/release: v0.22.1
  name: config-deployment
  namespace: knative-serving
---
apiVersion: v1
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.

    # Default value for domain.
    # Although it will match all routes, it is the least-specific rule so it
    # will only be used if no other domain matches.
    example.com: |

    # These are example settings of domain.
    # example.org will be used for routes having app=nonprofit.
    example.org: |
      selector:
        app: nonprofit

    # Routes having the cluster domain suffix (by default 'svc.cluster.local')
    # will not be exposed through Ingress. You can define your own label
    # selector to assign that domain suffix to your Route here, or you can set
    # the label
    #    "serving.knative.dev/visibility=cluster-local"
    # to achieve the same effect.  This shows how to make routes having
    # the label app=secret only exposed to the local cluster.
    svc.cluster.local: |
      selector:
        app: secret
kind: ConfigMap
metadata:
  annotations:
    knative.dev/example-checksum: 74c3fc6a
  labels:
    serving.knative.dev/release: v0.22.1
  name: config-domain
  namespace: knative-serving
---
apiVersion: v1
data:
  _example: |-
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.

    # Indicates whether multi container support is enabled
    #
    # WARNING: Cannot safely be disabled once enabled.
    # See: https://knative.dev/docs/serving/feature-flags/#multi-containers
    multi-container: "enabled"

    # Indicates whether Kubernetes affinity support is enabled
    #
    # WARNING: Cannot safely be disabled once enabled.
    # See: https://knative.dev/docs/serving/feature-flags/#kubernetes-node-affinity
    kubernetes.podspec-affinity: "disabled"

    # Indicates whether Kubernetes hostAliases support is enabled
    #
    # WARNING: Cannot safely be disabled once enabled.
    # See: https://knative.dev/docs/serving/feature-flags/#kubernetes-host-aliases
    kubernetes.podspec-hostaliases: "disabled"

    # Indicates whether Kubernetes nodeSelector support is enabled
    #
    # WARNING: Cannot safely be disabled once enabled.
    # See: https://knative.dev/docs/serving/feature-flags/#kubernetes-node-selector
    kubernetes.podspec-nodeselector: "disabled"

    # Indicates whether Kubernetes tolerations support is enabled
    #
    # WARNING: Cannot safely be disabled once enabled
    # See: https://knative.dev/docs/serving/feature-flags/#kubernetes-toleration
    kubernetes.podspec-tolerations: "disabled"

    # Indicates whether Kubernetes FieldRef support is enabled
    #
    # WARNING: Cannot safely be disabled once enabled.
    # See: https://knative.dev/docs/serving/feature-flags/#kubernetes-fieldref
    kubernetes.podspec-fieldref: "disabled"

    # Indicates whether Kubernetes RuntimeClassName support is enabled
    #
    # WARNING: Cannot safely be disabled once enabled.
    # See: https://knative.dev/docs/serving/feature-flags/#kubernetes-runtime-class
    kubernetes.podspec-runtimeclassname: "disabled"

    # This feature allows end-users to set a subset of fields on the Pod's SecurityContext
    # in addition to expanding the allowable fields within a Container's SecurityContext.
    #
    # When set to "enabled" or "allowed" it allows the following
    # PodSecurityContext properties:
    # - FSGroup
    # - RunAsGroup
    # - RunAsNonRoot
    # - SupplementalGroups
    # - RunAsUser
    #
    # When set to "enabled" or "allowed" it allows the following
    # Container SecurityContext properties:
    # - RunAsNonRoot
    # - RunAsGroup
    # - RunAsUser (already allowed without this flag)
    #
    # This feature flag should be used with caution as the PodSecurityContext
    # properties may have a side-effect on non-user sidecar containers that come
    # from Knative or your service mesh
    #
    # WARNING: Cannot safely be disabled once enabled.
    # See: https://knative.dev/docs/serving/feature-flags/#kubernetes-security-context
    kubernetes.podspec-securitycontext: "disabled"

    # This feature validates PodSpecs from the validating webhook
    # against the K8s API Server.
    #
    # When "enabled", the server will always run the extra validation.
    # When "allowed", the server will not run the dry-run validation by default.
    #   However, clients may enable the behavior on an individual Service by
    #   attaching the following metadata annotation: "features.knative.dev/podspec-dryrun":"enabled".
    # See: https://knative.dev/docs/serving/feature-flags/#kubernetes-dry-run
    kubernetes.podspec-dryrun: "allowed"

    # Indicates whether new responsive garbage collection is enabled. This
    # feature labels revisions in real-time as they become referenced and
    # dereferenced by Routes. This allows us to reap revisions shortly after
    # they are no longer active.
    # See: https://knative.dev/docs/serving/feature-flags/#responsive-revision-garbage-collector
    responsive-revision-gc: "enabled"

    # Controls whether tag header based routing feature are enabled or not.
    # 1. Enabled: enabling tag header based routing
    # 2. Disabled: disabling tag header based routing
    # See: https://knative.dev/docs/serving/feature-flags/#tag-header-based-routing
    tag-header-based-routing: "disabled"

    # Controls whether http2 auto-detection should be enabled or not.
    # 1. Enabled: http2 connection will be attempted via upgrade.
    # 2. Disabled: http2 connection will only be attempted when port name is set to "h2c".
    autodetect-http2: "disabled"
kind: ConfigMap
metadata:
  annotations:
    knative.dev/example-checksum: 2cf73688
  labels:
    serving.knative.dev/release: v0.22.1
  name: config-features
  namespace: knative-serving
---
apiVersion: v1
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.


    # ---------------------------------------
    # Garbage Collector Settings
    # ---------------------------------------
    #
    # Active
    #   * Revisions which are referenced by a Route are considered active.
    #   * Individual revisions may be marked with the annotation
    #      "knative.dev/no-gc":"true" to be permanently considered active.
    #   * Active revisions are not considered for GC.
    # Retention
    #   * Revisions are retained if they are any of the following:
    #       1. Active
    #       2. Were created within "retain-since-create-time"
    #       3. Were last referenced by a route within
    #           "retain-since-last-active-time"
    #       4. There are fewer than "min-non-active-revisions"
    #     If none of these conditions are met, or if the count of revisions exceed
    #      "max-non-active-revisions", they will be deleted by GC.
    #     The special value "disabled" may be used to turn off these limits.
    #
    # Example config to immediately collect any inactive revision:
    #    min-non-active-revisions: "0"
    #    retain-since-create-time: "disabled"
    #    retain-since-last-active-time: "disabled"
    #
    # Example config to always keep around the last ten non-active revisions:
    #     retain-since-create-time: "disabled"
    #     retain-since-last-active-time: "disabled"
    #     max-non-active-revisions: "10"
    #
    # Example config to disable all GC:
    #     retain-since-create-time: "disabled"
    #     retain-since-last-active-time: "disabled"
    #     max-non-active-revisions: "disabled"
    #
    # Example config to keep recently deployed or active revisions,
    # always maintain the last two in case of rollback, and prevent
    # burst activity from exploding the count of old revisions:
    #      retain-since-create-time: "48h"
    #      retain-since-last-active-time: "15h"
    #      min-non-active-revisions: "2"
    #      max-non-active-revisions: "1000"

    # Duration since creation before considering a revision for GC or "disabled".
    retain-since-create-time: "48h"

    # Duration since active before considering a revision for GC or "disabled".
    retain-since-last-active-time: "15h"

    # Minimum number of non-active revisions to retain.
    min-non-active-revisions: "20"

    # Maximum number of non-active revisions to retain
    # or "disabled" to disable any maximum limit.
    max-non-active-revisions: "1000"
kind: ConfigMap
metadata:
  annotations:
    knative.dev/example-checksum: e6149382
  labels:
    serving.knative.dev/release: v0.22.1
  name: config-gc
  namespace: knative-serving
---
apiVersion: v1
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.

    # Default Knative Gateway after v0.3. It points to the Istio
    # standard istio-ingressgateway, instead of a custom one that we
    # used pre-0.3. The configuration format should be `gateway.
    # {{gateway_namespace}}.{{gateway_name}}: "{{ingress_name}}.
    # {{ingress_namespace}}.svc.cluster.local"`. The {{gateway_namespace}}
    # is optional; when it is omitted, the system will search for
    # the gateway in the serving system namespace `knative-serving`
    gateway.knative-serving.knative-ingress-gateway: "istio-ingressgateway.istio-system.svc.cluster.local"

    # A cluster local gateway to allow pods outside of the mesh to access
    # Services and Routes not exposing through an ingress.  If the users
    # do have a service mesh setup, this isn't required and can be removed.
    #
    # An example use case is when users want to use Istio without any
    # sidecar injection (like Knative's istio-ci-no-mesh.yaml).  Since every pod
    # is outside of the service mesh in that case, a cluster-local  service
    # will need to be exposed to a cluster-local gateway to be accessible.
    # The configuration format should be `local-gateway.{{local_gateway_namespace}}.
    # {{local_gateway_name}}: "{{cluster_local_gateway_name}}.
    # {{cluster_local_gateway_namespace}}.svc.cluster.local"`. The
    # {{local_gateway_namespace}} is optional; when it is omitted, the system
    # will search for the local gateway in the serving system namespace
    # `knative-serving`
    local-gateway.knative-serving.knative-local-gateway: "knative-local-gateway.istio-system.svc.cluster.local"

    # To use only Istio service mesh and no knative-local-gateway, replace
    # all local-gateway.* entries by the following entry.
    local-gateway.mesh: "mesh"

    # If true, knative will use the Istio VirtualService's status to determine
    # endpoint readiness. Otherwise, probe as usual.
    enable-virtualservice-status: "false"
  gateway.kubeflow.kubeflow-gateway: istio-ingressgateway.istio-system.svc.cluster.local
kind: ConfigMap
metadata:
  labels:
    networking.knative.dev/ingress-provider: istio
    serving.knative.dev/release: v0.22.1
  name: config-istio
  namespace: knative-serving
---
apiVersion: v1
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.

    # leaseDuration is how long non-leaders will wait to try to acquire the
    # lock; 15 seconds is the value used by core kubernetes controllers.
    leaseDuration: "15s"

    # renewDeadline is how long a leader will try to renew the lease before
    # giving up; 10 seconds is the value used by core kubernetes controllers.
    renewDeadline: "10s"

    # retryPeriod is how long the leader election client waits between tries of
    # actions; 2 seconds is the value used by core kubernetes controllers.
    retryPeriod: "2s"

    # buckets is the number of buckets used to partition key space of each
    # Reconciler. If this number is M and the replica number of the controller
    # is N, the N replicas will compete for the M buckets. The owner of a
    # bucket will take care of the reconciling for the keys partitioned into
    # that bucket.
    buckets: "1"
kind: ConfigMap
metadata:
  annotations:
    knative.dev/example-checksum: 96896b00
  labels:
    serving.knative.dev/release: v0.22.1
  name: config-leader-election
  namespace: knative-serving
---
apiVersion: v1
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.

    # Common configuration for all Knative codebase
    zap-logger-config: |
      {
        "level": "info",
        "development": false,
        "outputPaths": ["stdout"],
        "errorOutputPaths": ["stderr"],
        "encoding": "json",
        "encoderConfig": {
          "timeKey": "timestamp",
          "levelKey": "severity",
          "nameKey": "logger",
          "callerKey": "caller",
          "messageKey": "message",
          "stacktraceKey": "stacktrace",
          "lineEnding": "",
          "levelEncoder": "",
          "timeEncoder": "iso8601",
          "durationEncoder": "",
          "callerEncoder": ""
        }
      }

    # Log level overrides
    # For all components except the queue proxy,
    # changes are picked up immediately.
    # For queue proxy, changes require recreation of the pods.
    loglevel.controller: "info"
    loglevel.autoscaler: "info"
    loglevel.queueproxy: "info"
    loglevel.webhook: "info"
    loglevel.activator: "info"
    loglevel.hpaautoscaler: "info"
    loglevel.certcontroller: "info"
    loglevel.istiocontroller: "info"
    loglevel.nscontroller: "info"
kind: ConfigMap
metadata:
  annotations:
    knative.dev/example-checksum: d9570453
  labels:
    serving.knative.dev/release: v0.22.1
  name: config-logging
  namespace: knative-serving
---
apiVersion: v1
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.

    # ingress.class specifies the default ingress class
    # to use when not dictated by Route annotation.
    #
    # If not specified, will use the Istio ingress.
    #
    # Note that changing the Ingress class of an existing Route
    # will result in undefined behavior.  Therefore it is best to only
    # update this value during the setup of Knative, to avoid getting
    # undefined behavior.
    ingress.class: "istio.ingress.networking.knative.dev"

    # certificate.class specifies the default Certificate class
    # to use when not dictated by Route annotation.
    #
    # If not specified, will use the Cert-Manager Certificate.
    #
    # Note that changing the Certificate class of an existing Route
    # will result in undefined behavior.  Therefore it is best to only
    # update this value during the setup of Knative, to avoid getting
    # undefined behavior.
    certificate.class: "cert-manager.certificate.networking.knative.dev"

    # domainTemplate specifies the golang text template string to use
    # when constructing the Knative service's DNS name. The default
    # value is "{{.Name}}.{{.Namespace}}.{{.Domain}}".
    #
    # Valid variables defined in the template include Name, Namespace, Domain,
    # Labels, and Annotations. Name will be the result of the tagTemplate
    # below, if a tag is specified for the route.
    #
    # Changing this value might be necessary when the extra levels in
    # the domain name generated is problematic for wildcard certificates
    # that only support a single level of domain name added to the
    # certificate's domain. In those cases you might consider using a value
    # of "{{.Name}}-{{.Namespace}}.{{.Domain}}", or removing the Namespace
    # entirely from the template. When choosing a new value be thoughtful
    # of the potential for conflicts - for example, when users choose to use
    # characters such as `-` in their service, or namespace, names.
    # {{.Annotations}} or {{.Labels}} can be used for any customization in the
    # go template if needed.
    # We strongly recommend keeping namespace part of the template to avoid
    # domain name clashes:
    # eg. '{{.Name}}-{{.Namespace}}.{{ index .Annotations "sub"}}.{{.Domain}}'
    # and you have an annotation {"sub":"foo"}, then the generated template
    # would be {Name}-{Namespace}.foo.{Domain}
    domainTemplate: "{{.Name}}.{{.Namespace}}.{{.Domain}}"

    # tagTemplate specifies the golang text template string to use
    # when constructing the DNS name for "tags" within the traffic blocks
    # of Routes and Configuration.  This is used in conjunction with the
    # domainTemplate above to determine the full URL for the tag.
    tagTemplate: "{{.Tag}}-{{.Name}}"

    # Controls whether TLS certificates are automatically provisioned and
    # installed in the Knative ingress to terminate external TLS connection.
    # 1. Enabled: enabling auto-TLS feature.
    # 2. Disabled: disabling auto-TLS feature.
    autoTLS: "Disabled"

    # Controls the behavior of the HTTP endpoint for the Knative ingress.
    # It requires autoTLS to be enabled.
    # 1. Enabled: The Knative ingress will be able to serve HTTP connection.
    # 2. Disabled: The Knative ingress will reject HTTP traffic.
    # 3. Redirected: The Knative ingress will send a 302 redirect for all
    # http connections, asking the clients to use HTTPS.
    httpProtocol: "Enabled"

    # rolloutDuration contains the minimal duration in seconds over which the
    # Configuration traffic targets are rolled out to the newest revision.
    rolloutDuration: "0"

    # autocreateClusterDomainClaims controls whether ClusterDomainClaims should
    # be automatically created (and deleted) as needed when DomainMappings are
    # reconciled.
    #
    # If this is "false", the cluster administrator is responsible for creating
    # ClusterDomainClaims and delegating them to namespaces via their
    # spec.Namespace field. This is useful for multitenant environments
    # which need to control which namespace can use a particular domain name in
    # a domain mapping.
    autocreateClusterDomainClaims: "true"

    # If true, networking plugins can add additional information to deployed
    # applications to make their pods directly accessible via their IPs even if mesh is
    # enabled and thus direct-addressability is usually not possible.
    # Consumers like Knative Serving can use this setting to adjust their behavior
    # accordingly, i.e. to drop fallback solutions for non-pod-addressable systems.
    #
    # NOTE: This flag is in an alpha state and is mostly here to enable internal testing
    #       for now. Use with caution.
    enable-mesh-pod-addressability: "false"
kind: ConfigMap
metadata:
  annotations:
    knative.dev/example-checksum: 15954d34
  labels:
    serving.knative.dev/release: v0.22.1
  name: config-network
  namespace: knative-serving
---
apiVersion: v1
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.

    # logging.enable-var-log-collection defaults to false.
    # The fluentd daemon set will be set up to collect /var/log if
    # this flag is true.
    logging.enable-var-log-collection: "false"

    # logging.revision-url-template provides a template to use for producing the
    # logging URL that is injected into the status of each Revision.
    logging.revision-url-template: "http://logging.example.com/?revisionUID=${REVISION_UID}"

    # If non-empty, this enables queue proxy writing user request logs to stdout, excluding probe
    # requests.
    # NB: after 0.18 release logging.enable-request-log must be explicitly set to true
    # in order for request logging to be enabled.
    #
    # The value determines the shape of the request logs and it must be a valid go text/template.
    # It is important to keep this as a single line. Multiple lines are parsed as separate entities
    # by most collection agents and will split the request logs into multiple records.
    #
    # The following fields and functions are available to the template:
    #
    # Request: An http.Request (see https://golang.org/pkg/net/http/#Request)
    # representing an HTTP request received by the server.
    #
    # Response:
    # struct {
    #   Code    int       // HTTP status code (see https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml)
    #   Size    int       // An int representing the size of the response.
    #   Latency float64   // A float64 representing the latency of the response in seconds.
    # }
    #
    # Revision:
    # struct {
    #   Name          string  // Knative revision name
    #   Namespace     string  // Knative revision namespace
    #   Service       string  // Knative service name
    #   Configuration string  // Knative configuration name
    #   PodName       string  // Name of the pod hosting the revision
    #   PodIP         string  // IP of the pod hosting the revision
    # }
    #
    logging.request-log-template: '{"httpRequest": {"requestMethod": "{{.Request.Method}}", "requestUrl": "{{js .Request.RequestURI}}", "requestSize": "{{.Request.ContentLength}}", "status": {{.Response.Code}}, "responseSize": "{{.Response.Size}}", "userAgent": "{{js .Request.UserAgent}}", "remoteIp": "{{js .Request.RemoteAddr}}", "serverIp": "{{.Revision.PodIP}}", "referer": "{{js .Request.Referer}}", "latency": "{{.Response.Latency}}s", "protocol": "{{.Request.Proto}}"}, "traceId": "{{index .Request.Header "X-B3-Traceid"}}"}'

    # If true, the request logging will be enabled.
    # NB: up to and including Knative version 0.18 if logging.request-log-template is non-empty, this value
    # will be ignored.
    logging.enable-request-log: "false"

    # If true, this enables queue proxy writing request logs for probe requests to stdout.
    # It uses the same template for user requests, i.e. logging.request-log-template.
    logging.enable-probe-request-log: "false"

    # metrics.backend-destination field specifies the system metrics destination.
    # It supports either prometheus (the default) or stackdriver.
    # Note: Using stackdriver will incur additional charges
    metrics.backend-destination: prometheus

    # metrics.request-metrics-backend-destination specifies the request metrics
    # destination. It enables queue proxy to send request metrics.
    # Currently supported values: prometheus (the default), stackdriver.
    metrics.request-metrics-backend-destination: prometheus

    # metrics.stackdriver-project-id field specifies the stackdriver project ID. This
    # field is optional. When running on GCE, application default credentials will be
    # used if this field is not provided.
    metrics.stackdriver-project-id: "<your stackdriver project id>"

    # metrics.allow-stackdriver-custom-metrics indicates whether it is allowed to send metrics to
    # Stackdriver using "global" resource type and custom metric type if the
    # metrics are not supported by "knative_revision" resource type. Setting this
    # flag to "true" could cause extra Stackdriver charge.
    # If metrics.backend-destination is not Stackdriver, this is ignored.
    metrics.allow-stackdriver-custom-metrics: "false"

    # profiling.enable indicates whether it is allowed to retrieve runtime profiling data from
    # the pods via an HTTP server in the format expected by the pprof visualization tool. When
    # enabled, the Knative Serving pods expose the profiling data on an alternate HTTP port 8008.
    # The HTTP context root for profiling is then /debug/pprof/.
    profiling.enable: "false"
kind: ConfigMap
metadata:
  annotations:
    knative.dev/example-checksum: 97c1d10b
  labels:
    serving.knative.dev/release: v0.22.1
  name: config-observability
  namespace: knative-serving
---
apiVersion: v1
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.
    #
    # This may be "zipkin" or "stackdriver", the default is "none"
    backend: "none"

    # URL to zipkin collector where traces are sent.
    # This must be specified when backend is "zipkin"
    zipkin-endpoint: "http://zipkin.istio-system.svc.cluster.local:9411/api/v2/spans"

    # The GCP project into which stackdriver metrics will be written
    # when backend is "stackdriver".  If unspecified, the project-id
    # is read from GCP metadata when running on GCP.
    stackdriver-project-id: "my-project"

    # Enable zipkin debug mode. This allows all spans to be sent to the server
    # bypassing sampling.
    debug: "false"

    # Percentage (0-1) of requests to trace
    sample-rate: "0.1"
kind: ConfigMap
metadata:
  annotations:
    knative.dev/example-checksum: 4002b4c2
  labels:
    serving.knative.dev/release: v0.22.1
  name: config-tracing
  namespace: knative-serving
---
apiVersion: v1
data:
  OIDC_CLIENT_ID: a3ViZWZsb3ctb2lkYy1hdXRoc2VydmljZQ==
  OIDC_CLIENT_SECRET: cFVCbkJPWTgwU25YZ2ppYlRZTTlaV056WTJ4cmVOR1Fvaw==
kind: Secret
metadata:
  name: dex-oidc-client
  namespace: auth
type: Opaque
---
apiVersion: v1
data:
  CLIENT_ID: a3ViZWZsb3ctb2lkYy1hdXRoc2VydmljZQ==
  CLIENT_SECRET: cFVCbkJPWTgwU25YZ2ppYlRZTTlaV056WTJ4cmVOR1Fvaw==
kind: Secret
metadata:
  name: oidc-authservice-client
  namespace: istio-system
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: eventing-webhook-certs
  namespace: knative-eventing
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    networking.knative.dev/ingress-provider: istio
    serving.knative.dev/release: v0.22.1
  name: istio-webhook-certs
  namespace: knative-serving
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    serving.knative.dev/release: v0.22.1
  name: webhook-certs
  namespace: knative-serving
---
apiVersion: v1
kind: Service
metadata:
  name: dex
  namespace: auth
spec:
  ports:
  - name: dex
    nodePort: 32000
    port: 5556
    protocol: TCP
    targetPort: 5556
  selector:
    app: dex
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  name: authservice
  namespace: istio-system
spec:
  ports:
  - name: http-authservice
    port: 8080
    targetPort: http-api
  publishNotReadyAddresses: true
  selector:
    app: authservice
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations: null
  labels:
    app: cluster-local-gateway
    install.operator.istio.io/owning-resource: unknown
    istio: cluster-local-gateway
    istio.io/rev: default
    operator.istio.io/component: IngressGateways
    release: istio
  name: cluster-local-gateway
  namespace: istio-system
spec:
  ports:
  - name: status-port
    port: 15020
    protocol: TCP
    targetPort: 15020
  - name: http2
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: cluster-local-gateway
    istio: cluster-local-gateway
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    networking.knative.dev/ingress-provider: istio
    serving.knative.dev/release: v0.22.1
  name: knative-local-gateway
  namespace: istio-system
spec:
  ports:
  - name: http2
    port: 80
    targetPort: 8081
  selector:
    app: cluster-local-gateway
    istio: cluster-local-gateway
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/brokerRole: filter
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: broker-filter
  namespace: knative-eventing
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: http-metrics
    port: 9092
    protocol: TCP
    targetPort: 9092
  selector:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/brokerRole: filter
    kustomize.component: knative
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/brokerRole: ingress
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: broker-ingress
  namespace: knative-eventing
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: http-metrics
    port: 9092
    protocol: TCP
    targetPort: 9092
  selector:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/brokerRole: ingress
    kustomize.component: knative
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
    role: eventing-webhook
  name: eventing-webhook
  namespace: knative-eventing
spec:
  ports:
  - name: https-webhook
    port: 443
    targetPort: 8443
  selector:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    kustomize.component: knative
    role: eventing-webhook
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
    messaging.knative.dev/channel: in-memory-channel
    messaging.knative.dev/role: dispatcher
  name: imc-dispatcher
  namespace: knative-eventing
spec:
  ports:
  - name: http-dispatcher
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    kustomize.component: knative
    messaging.knative.dev/channel: in-memory-channel
    messaging.knative.dev/role: dispatcher
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: activator
    serving.knative.dev/release: v0.22.1
  name: activator-service
  namespace: knative-serving
spec:
  ports:
  - name: http-metrics
    port: 9090
    targetPort: 9090
  - name: http-profiling
    port: 8008
    targetPort: 8008
  - name: http
    port: 80
    targetPort: 8012
  - name: http2
    port: 81
    targetPort: 8013
  selector:
    app: activator
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: controller
    serving.knative.dev/release: v0.22.1
  name: controller
  namespace: knative-serving
spec:
  ports:
  - name: http-metrics
    port: 9090
    targetPort: 9090
  - name: http-profiling
    port: 8008
    targetPort: 8008
  selector:
    app: controller
---
apiVersion: v1
kind: Service
metadata:
  labels:
    networking.knative.dev/ingress-provider: istio
    role: istio-webhook
    serving.knative.dev/release: v0.22.1
  name: istio-webhook
  namespace: knative-serving
spec:
  ports:
  - name: http-metrics
    port: 9090
    targetPort: 9090
  - name: http-profiling
    port: 8008
    targetPort: 8008
  - name: https-webhook
    port: 443
    targetPort: 8443
  selector:
    app: istio-webhook
---
apiVersion: v1
kind: Service
metadata:
  labels:
    role: webhook
    serving.knative.dev/release: v0.22.1
  name: webhook
  namespace: knative-serving
spec:
  ports:
  - name: http-metrics
    port: 9090
    targetPort: 9090
  - name: http-profiling
    port: 8008
    targetPort: 8008
  - name: https-webhook
    port: 443
    targetPort: 8443
  selector:
    role: webhook
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dex
  name: dex
  namespace: auth
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dex
  template:
    metadata:
      labels:
        app: dex
    spec:
      containers:
      - command:
        - dex
        - serve
        - /etc/dex/cfg/config.yaml
        env:
        - name: KUBERNETES_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - secretRef:
            name: dex-oidc-client
        image: quay.io/dexidp/dex:v2.24.0
        name: dex
        ports:
        - containerPort: 5556
          name: http
        volumeMounts:
        - mountPath: /etc/dex/cfg
          name: config
      serviceAccountName: dex
      volumes:
      - configMap:
          items:
          - key: config.yaml
            path: config.yaml
          name: dex
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: cluster-local-gateway
    install.operator.istio.io/owning-resource: unknown
    istio: cluster-local-gateway
    istio.io/rev: default
    operator.istio.io/component: IngressGateways
    release: istio
  name: cluster-local-gateway
  namespace: istio-system
spec:
  selector:
    matchLabels:
      app: cluster-local-gateway
      istio: cluster-local-gateway
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  template:
    metadata:
      annotations:
        prometheus.io/path: /stats/prometheus
        prometheus.io/port: "15020"
        prometheus.io/scrape: "true"
        sidecar.istio.io/inject: "false"
      labels:
        app: cluster-local-gateway
        chart: gateways
        heritage: Tiller
        install.operator.istio.io/owning-resource: unknown
        istio: cluster-local-gateway
        istio.io/rev: default
        operator.istio.io/component: IngressGateways
        release: istio
        service.istio.io/canonical-name: cluster-local-gateway
        service.istio.io/canonical-revision: latest
        sidecar.istio.io/inject: "false"
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
            weight: 2
          - preference:
              matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - ppc64le
            weight: 2
          - preference:
              matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - s390x
            weight: 2
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
      containers:
      - args:
        - proxy
        - router
        - --domain
        - $(POD_NAMESPACE).svc.cluster.local
        - --proxyLogLevel=warning
        - --proxyComponentLogLevel=misc:error
        - --log_output_level=default:info
        - --serviceCluster
        - cluster-local-gateway
        env:
        - name: JWT_POLICY
          value: third-party-jwt
        - name: PILOT_CERT_PROVIDER
          value: istiod
        - name: CA_ADDR
          value: istiod.istio-system.svc:15012
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: HOST_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        - name: SERVICE_ACCOUNT
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: CANONICAL_SERVICE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['service.istio.io/canonical-name']
        - name: CANONICAL_REVISION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['service.istio.io/canonical-revision']
        - name: ISTIO_META_WORKLOAD_NAME
          value: cluster-local-gateway
        - name: ISTIO_META_OWNER
          value: kubernetes://apis/apps/v1/namespaces/istio-system/deployments/cluster-local-gateway
        - name: ISTIO_META_UNPRIVILEGED_POD
          value: "true"
        - name: ISTIO_META_ROUTER_MODE
          value: sni-dnat
        - name: ISTIO_META_CLUSTER_ID
          value: Kubernetes
        image: docker.io/istio/proxyv2:1.9.6
        name: istio-proxy
        ports:
        - containerPort: 15020
          protocol: TCP
        - containerPort: 8080
          protocol: TCP
        - containerPort: 15090
          name: http-envoy-prom
          protocol: TCP
        readinessProbe:
          failureThreshold: 30
          httpGet:
            path: /healthz/ready
            port: 15021
            scheme: HTTP
          initialDelaySeconds: 1
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 2000m
            memory: 1024Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /etc/istio/proxy
          name: istio-envoy
        - mountPath: /etc/istio/config
          name: config-volume
        - mountPath: /var/run/secrets/istio
          name: istiod-ca-cert
        - mountPath: /var/run/secrets/tokens
          name: istio-token
          readOnly: true
        - mountPath: /var/lib/istio/data
          name: istio-data
        - mountPath: /etc/istio/pod
          name: podinfo
        - mountPath: /etc/istio/ingressgateway-certs
          name: ingressgateway-certs
          readOnly: true
        - mountPath: /etc/istio/ingressgateway-ca-certs
          name: ingressgateway-ca-certs
          readOnly: true
      securityContext:
        fsGroup: 1337
        runAsGroup: 1337
        runAsNonRoot: true
        runAsUser: 1337
      serviceAccountName: cluster-local-gateway-service-account
      volumes:
      - configMap:
          name: istio-ca-root-cert
        name: istiod-ca-cert
      - downwardAPI:
          items:
          - fieldRef:
              fieldPath: metadata.labels
            path: labels
          - fieldRef:
              fieldPath: metadata.annotations
            path: annotations
          - path: cpu-limit
            resourceFieldRef:
              containerName: istio-proxy
              divisor: 1m
              resource: limits.cpu
          - path: cpu-request
            resourceFieldRef:
              containerName: istio-proxy
              divisor: 1m
              resource: requests.cpu
        name: podinfo
      - emptyDir: {}
        name: istio-envoy
      - emptyDir: {}
        name: istio-data
      - name: istio-token
        projected:
          sources:
          - serviceAccountToken:
              audience: istio-ca
              expirationSeconds: 43200
              path: istio-token
      - configMap:
          name: istio
          optional: true
        name: config-volume
      - name: ingressgateway-certs
        secret:
          optional: true
          secretName: istio-ingressgateway-certs
      - name: ingressgateway-ca-certs
        secret:
          optional: true
          secretName: istio-ingressgateway-ca-certs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    knative.dev/high-availability: "true"
    kustomize.component: knative
  name: eventing-controller
  namespace: knative-eventing
spec:
  selector:
    matchLabels:
      app: eventing-controller
      app.kubernetes.io/component: knative-eventing
      app.kubernetes.io/name: knative-eventing
      kustomize.component: knative
  template:
    metadata:
      labels:
        app: eventing-controller
        app.kubernetes.io/component: knative-eventing
        app.kubernetes.io/name: knative-eventing
        eventing.knative.dev/release: v0.22.1
        kustomize.component: knative
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: eventing-controller
                  app.kubernetes.io/component: knative-eventing
                  app.kubernetes.io/name: knative-eventing
                  kustomize.component: knative
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - env:
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: CONFIG_OBSERVABILITY_NAME
          value: config-observability
        - name: METRICS_DOMAIN
          value: knative.dev/eventing
        - name: APISERVER_RA_IMAGE
          value: gcr.io/knative-releases/knative.dev/eventing/cmd/apiserver_receive_adapter@sha256:a05b1db9acdfe901417307ddf403ec3702f219e5aeb25d692bc9542fc6421330
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: gcr.io/knative-releases/knative.dev/eventing/cmd/controller@sha256:6ddffbc286a84048cfd090193d00b4ecda25a3a7bf2de1a8e873f8b3755cc913
        name: eventing-controller
        ports:
        - containerPort: 9090
          name: metrics
        - containerPort: 8008
          name: profiling
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        securityContext:
          allowPrivilegeEscalation: false
        terminationMessagePolicy: FallbackToLogsOnError
      enableServiceLinks: false
      serviceAccountName: eventing-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: eventing-webhook
  namespace: knative-eventing
spec:
  selector:
    matchLabels:
      app: eventing-webhook
      app.kubernetes.io/component: knative-eventing
      app.kubernetes.io/name: knative-eventing
      kustomize.component: knative
      role: eventing-webhook
  template:
    metadata:
      labels:
        app: eventing-webhook
        app.kubernetes.io/component: knative-eventing
        app.kubernetes.io/name: knative-eventing
        kustomize.component: knative
        role: eventing-webhook
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: eventing-webhook
                  app.kubernetes.io/component: knative-eventing
                  app.kubernetes.io/name: knative-eventing
                  kustomize.component: knative
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - env:
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: METRICS_DOMAIN
          value: knative.dev/eventing
        - name: WEBHOOK_NAME
          value: eventing-webhook
        - name: WEBHOOK_PORT
          value: "8443"
        - name: SINK_BINDING_SELECTION_MODE
          value: exclusion
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: gcr.io/knative-releases/knative.dev/eventing/cmd/webhook@sha256:9f70a2a8bb78781472fba0327c5d6ff91f13a29736d4502bf8ad3d60d3f16ccd
        livenessProbe:
          httpGet:
            httpHeaders:
            - name: k-kubelet-probe
              value: webhook
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 20
          periodSeconds: 1
        name: eventing-webhook
        ports:
        - containerPort: 8443
          name: https-webhook
        - containerPort: 9090
          name: metrics
        - containerPort: 8008
          name: profiling
        readinessProbe:
          httpGet:
            httpHeaders:
            - name: k-kubelet-probe
              value: webhook
            port: 8443
            scheme: HTTPS
          periodSeconds: 1
        resources:
          limits:
            cpu: 200m
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 50Mi
        securityContext:
          allowPrivilegeEscalation: false
        terminationMessagePolicy: FallbackToLogsOnError
      enableServiceLinks: false
      serviceAccountName: eventing-webhook
      terminationGracePeriodSeconds: 300
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    knative.dev/high-availability: "true"
    kustomize.component: knative
  name: imc-controller
  namespace: knative-eventing
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: knative-eventing
      app.kubernetes.io/name: knative-eventing
      kustomize.component: knative
      messaging.knative.dev/channel: in-memory-channel
      messaging.knative.dev/role: controller
  template:
    metadata:
      labels:
        app.kubernetes.io/component: knative-eventing
        app.kubernetes.io/name: knative-eventing
        kustomize.component: knative
        messaging.knative.dev/channel: in-memory-channel
        messaging.knative.dev/role: controller
    spec:
      containers:
      - env:
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: CONFIG_OBSERVABILITY_NAME
          value: config-observability
        - name: METRICS_DOMAIN
          value: knative.dev/inmemorychannel-controller
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: DISPATCHER_IMAGE
          value: gcr.io/knative-releases/knative.dev/eventing/cmd/in_memory/channel_dispatcher@sha256:a6983f71c04619928199cc21e07ee6f1e1c87586621bc03b10c9ba1abd92bfa8
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: gcr.io/knative-releases/knative.dev/eventing/cmd/in_memory/channel_controller@sha256:904f42a768a9bc64999e7302d2bc7c1c48a08e74a82355cf57be513e6a124b82
        name: controller
        ports:
        - containerPort: 9090
          name: metrics
        - containerPort: 8008
          name: profiling
        securityContext:
          allowPrivilegeEscalation: false
      enableServiceLinks: false
      serviceAccountName: imc-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    knative.dev/high-availability: "true"
    kustomize.component: knative
  name: imc-dispatcher
  namespace: knative-eventing
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: knative-eventing
      app.kubernetes.io/name: knative-eventing
      kustomize.component: knative
      messaging.knative.dev/channel: in-memory-channel
      messaging.knative.dev/role: dispatcher
  template:
    metadata:
      labels:
        app.kubernetes.io/component: knative-eventing
        app.kubernetes.io/name: knative-eventing
        kustomize.component: knative
        messaging.knative.dev/channel: in-memory-channel
        messaging.knative.dev/role: dispatcher
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/component: knative-eventing
                  app.kubernetes.io/name: knative-eventing
                  kustomize.component: knative
                  messaging.knative.dev/channel: in-memory-channel
                  messaging.knative.dev/role: dispatcher
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - env:
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: CONFIG_OBSERVABILITY_NAME
          value: config-observability
        - name: METRICS_DOMAIN
          value: knative.dev/inmemorychannel-dispatcher
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: CONTAINER_NAME
          value: dispatcher
        - name: MAX_IDLE_CONNS
          value: "1000"
        - name: MAX_IDLE_CONNS_PER_HOST
          value: "1000"
        image: gcr.io/knative-releases/knative.dev/eventing/cmd/in_memory/channel_dispatcher@sha256:a6983f71c04619928199cc21e07ee6f1e1c87586621bc03b10c9ba1abd92bfa8
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 1
        name: dispatcher
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 1
      enableServiceLinks: false
      serviceAccountName: imc-dispatcher
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: mt-broker-controller
  namespace: knative-eventing
spec:
  selector:
    matchLabels:
      app: mt-broker-controller
      app.kubernetes.io/component: knative-eventing
      app.kubernetes.io/name: knative-eventing
      kustomize.component: knative
  template:
    metadata:
      labels:
        app: mt-broker-controller
        app.kubernetes.io/component: knative-eventing
        app.kubernetes.io/name: knative-eventing
        eventing.knative.dev/release: v0.22.1
        kustomize.component: knative
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: mt-broker-controller
                  app.kubernetes.io/component: knative-eventing
                  app.kubernetes.io/name: knative-eventing
                  kustomize.component: knative
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - env:
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: CONFIG_OBSERVABILITY_NAME
          value: config-observability
        - name: METRICS_DOMAIN
          value: knative.dev/eventing
        - name: BROKER_INJECTION_DEFAULT
          value: "false"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: gcr.io/knative-releases/knative.dev/eventing/cmd/mtchannel_broker@sha256:a2678934d280ea19b0804cc7757d559a0312e2acea221b17a99bd830cd9eeaac
        name: mt-broker-controller
        ports:
        - containerPort: 9090
          name: metrics
        - containerPort: 8008
          name: profiling
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        securityContext:
          allowPrivilegeEscalation: false
        terminationMessagePolicy: FallbackToLogsOnError
      enableServiceLinks: false
      serviceAccountName: eventing-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: mt-broker-filter
  namespace: knative-eventing
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: knative-eventing
      app.kubernetes.io/name: knative-eventing
      eventing.knative.dev/brokerRole: filter
      kustomize.component: knative
  template:
    metadata:
      labels:
        app.kubernetes.io/component: knative-eventing
        app.kubernetes.io/name: knative-eventing
        eventing.knative.dev/brokerRole: filter
        eventing.knative.dev/release: v0.22.1
        kustomize.component: knative
    spec:
      containers:
      - env:
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: CONTAINER_NAME
          value: filter
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: CONFIG_OBSERVABILITY_NAME
          value: config-observability
        - name: METRICS_DOMAIN
          value: knative.dev/internal/eventing
        - name: FILTER_PORT
          value: "8080"
        image: gcr.io/knative-releases/knative.dev/eventing/cmd/broker/filter@sha256:0e25aa1613a3a1779b3f7b7f863e651e5f37520a7f6808ccad2164cc2b6a9b12
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 1
        name: filter
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9092
          name: metrics
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        securityContext:
          allowPrivilegeEscalation: false
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: FallbackToLogsOnError
      enableServiceLinks: false
      serviceAccountName: mt-broker-filter
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: mt-broker-ingress
  namespace: knative-eventing
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: knative-eventing
      app.kubernetes.io/name: knative-eventing
      eventing.knative.dev/brokerRole: ingress
      kustomize.component: knative
  template:
    metadata:
      labels:
        app.kubernetes.io/component: knative-eventing
        app.kubernetes.io/name: knative-eventing
        eventing.knative.dev/brokerRole: ingress
        eventing.knative.dev/release: v0.22.1
        kustomize.component: knative
    spec:
      containers:
      - env:
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: CONTAINER_NAME
          value: ingress
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: CONFIG_OBSERVABILITY_NAME
          value: config-observability
        - name: METRICS_DOMAIN
          value: knative.dev/internal/eventing
        - name: INGRESS_PORT
          value: "8080"
        image: gcr.io/knative-releases/knative.dev/eventing/cmd/broker/ingress@sha256:cf579f88aa2a37c240e25bb886c1ef5404e326e12c7caf571e49308612243eee
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 1
        name: ingress
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9092
          name: metrics
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        securityContext:
          allowPrivilegeEscalation: false
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: FallbackToLogsOnError
      enableServiceLinks: false
      serviceAccountName: mt-broker-ingress
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: pingsource-mt-adapter
  namespace: knative-eventing
spec:
  replicas: 0
  selector:
    matchLabels:
      app.kubernetes.io/component: knative-eventing
      app.kubernetes.io/name: knative-eventing
      eventing.knative.dev/source: ping-source-controller
      kustomize.component: knative
      sources.knative.dev/role: adapter
  template:
    metadata:
      labels:
        app.kubernetes.io/component: knative-eventing
        app.kubernetes.io/name: knative-eventing
        eventing.knative.dev/release: v0.22.1
        eventing.knative.dev/source: ping-source-controller
        kustomize.component: knative
        sources.knative.dev/role: adapter
    spec:
      containers:
      - env:
        - name: SYSTEM_NAMESPACE
          value: ""
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: K_METRICS_CONFIG
          value: ""
        - name: K_LOGGING_CONFIG
          value: ""
        - name: K_LEADER_ELECTION_CONFIG
          value: ""
        - name: K_NO_SHUTDOWN_AFTER
          value: ""
        - name: K_SINK_TIMEOUT
          value: "-1"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: gcr.io/knative-releases/knative.dev/eventing/cmd/mtping@sha256:edf462d03591e53e536640591a53538e6bea837fea15ed081eccfb42bc35a5c0
        name: dispatcher
        ports:
        - containerPort: 9090
          name: metrics
          protocol: TCP
        resources:
          limits:
            cpu: 1000m
            memory: 2048Mi
          requests:
            cpu: 125m
            memory: 64Mi
      enableServiceLinks: false
      serviceAccountName: pingsource-mt-adapter
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    serving.knative.dev/release: v0.22.1
  name: activator
  namespace: knative-serving
spec:
  selector:
    matchLabels:
      app: activator
      role: activator
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
        sidecar.istio.io/inject: "true"
      labels:
        app: activator
        role: activator
        serving.knative.dev/release: v0.22.1
    spec:
      containers:
      - env:
        - name: GOGC
          value: "500"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: CONFIG_OBSERVABILITY_NAME
          value: config-observability
        - name: METRICS_DOMAIN
          value: knative.dev/internal/serving
        image: gcr.io/knative-releases/knative.dev/serving/cmd/activator@sha256:fed92af8b9779c97482906db8857f27b5d4826708b75d0298aa30fad8900671f
        livenessProbe:
          failureThreshold: 12
          httpGet:
            httpHeaders:
            - name: k-kubelet-probe
              value: activator
            port: 8012
          initialDelaySeconds: 15
        name: activator
        ports:
        - containerPort: 9090
          name: metrics
        - containerPort: 8008
          name: profiling
        - containerPort: 8012
          name: http1
        - containerPort: 8013
          name: h2c
        readinessProbe:
          failureThreshold: 12
          httpGet:
            httpHeaders:
            - name: k-kubelet-probe
              value: activator
            port: 8012
        resources:
          limits:
            cpu: 1000m
            memory: 600Mi
          requests:
            cpu: 300m
            memory: 60Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - all
          readOnlyRootFilesystem: true
          runAsNonRoot: true
      serviceAccountName: controller
      terminationGracePeriodSeconds: 600
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    serving.knative.dev/release: v0.22.1
  name: controller
  namespace: knative-serving
spec:
  selector:
    matchLabels:
      app: controller
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        sidecar.istio.io/inject: "true"
      labels:
        app: controller
        serving.knative.dev/release: v0.22.1
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: controller
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: CONFIG_OBSERVABILITY_NAME
          value: config-observability
        - name: METRICS_DOMAIN
          value: knative.dev/internal/serving
        image: gcr.io/knative-releases/knative.dev/serving/cmd/controller@sha256:bd7c6350e5d5c4edaa197a86fb96cff78bdd3e61f33fcb77aa60930de0ec0827
        name: controller
        ports:
        - containerPort: 9090
          name: metrics
        - containerPort: 8008
          name: profiling
        resources:
          limits:
            cpu: 1000m
            memory: 1000Mi
          requests:
            cpu: 100m
            memory: 100Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - all
          readOnlyRootFilesystem: true
          runAsNonRoot: true
      serviceAccountName: controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    networking.knative.dev/ingress-provider: istio
    serving.knative.dev/release: v0.22.1
  name: istio-webhook
  namespace: knative-serving
spec:
  selector:
    matchLabels:
      app: istio-webhook
      role: istio-webhook
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
        sidecar.istio.io/inject: "true"
      labels:
        app: istio-webhook
        role: istio-webhook
        serving.knative.dev/release: v0.22.1
    spec:
      containers:
      - env:
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: CONFIG_OBSERVABILITY_NAME
          value: config-observability
        - name: METRICS_DOMAIN
          value: knative.dev/net-istio
        - name: WEBHOOK_NAME
          value: istio-webhook
        image: gcr.io/knative-releases/knative.dev/net-istio/cmd/webhook@sha256:1e371db6b1a9f9265fc7a55d15d98c935c0c28925ffde351fb3b93f331c5a08e
        name: webhook
        ports:
        - containerPort: 9090
          name: metrics
        - containerPort: 8008
          name: profiling
        - containerPort: 8443
          name: https-webhook
        resources:
          limits:
            cpu: 200m
            memory: 200Mi
          requests:
            cpu: 20m
            memory: 20Mi
        securityContext:
          allowPrivilegeEscalation: false
      serviceAccountName: controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    networking.knative.dev/ingress-provider: istio
    serving.knative.dev/release: v0.22.1
  name: networking-istio
  namespace: knative-serving
spec:
  selector:
    matchLabels:
      app: networking-istio
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        sidecar.istio.io/inject: "true"
      labels:
        app: networking-istio
        serving.knative.dev/release: v0.22.1
    spec:
      containers:
      - env:
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: CONFIG_OBSERVABILITY_NAME
          value: config-observability
        - name: METRICS_DOMAIN
          value: knative.dev/net-istio
        image: gcr.io/knative-releases/knative.dev/net-istio/cmd/controller@sha256:ff8680da52ef47b8573ebc3393cbfa2f0f14b05c1e02232807f22699adbef57a
        name: networking-istio
        ports:
        - containerPort: 9090
          name: metrics
        - containerPort: 8008
          name: profiling
        resources:
          limits:
            cpu: 300m
            memory: 400Mi
          requests:
            cpu: 30m
            memory: 40Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - all
          readOnlyRootFilesystem: true
          runAsNonRoot: true
      serviceAccountName: controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    serving.knative.dev/release: v0.22.1
  name: webhook
  namespace: knative-serving
spec:
  selector:
    matchLabels:
      app: webhook
      role: webhook
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
        sidecar.istio.io/inject: "true"
      labels:
        app: webhook
        role: webhook
        serving.knative.dev/release: v0.22.1
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: webhook
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: CONFIG_OBSERVABILITY_NAME
          value: config-observability
        - name: WEBHOOK_NAME
          value: webhook
        - name: WEBHOOK_PORT
          value: "8443"
        - name: METRICS_DOMAIN
          value: knative.dev/internal/serving
        image: gcr.io/knative-releases/knative.dev/serving/cmd/webhook@sha256:6f41d379f1aacdfbb8f6d4f539e1769040e4f01bff3ad9c249b427e54dc56ea8
        livenessProbe:
          failureThreshold: 6
          httpGet:
            httpHeaders:
            - name: k-kubelet-probe
              value: webhook
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 20
          periodSeconds: 1
        name: webhook
        ports:
        - containerPort: 9090
          name: metrics
        - containerPort: 8008
          name: profiling
        - containerPort: 8443
          name: https-webhook
        readinessProbe:
          httpGet:
            httpHeaders:
            - name: k-kubelet-probe
              value: webhook
            port: 8443
            scheme: HTTPS
          periodSeconds: 1
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 100Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - all
          readOnlyRootFilesystem: true
          runAsNonRoot: true
      serviceAccountName: controller
      terminationGracePeriodSeconds: 300
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: authservice
  namespace: istio-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: authservice
  serviceName: authservice
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app: authservice
    spec:
      containers:
      - envFrom:
        - secretRef:
            name: oidc-authservice-client
        - configMapRef:
            name: oidc-authservice-parameters
        image: gcr.io/arrikto/kubeflow/oidc-authservice:28c59ef
        imagePullPolicy: Always
        name: authservice
        ports:
        - containerPort: 8080
          name: http-api
        readinessProbe:
          httpGet:
            path: /
            port: 8081
        volumeMounts:
        - mountPath: /var/lib/authservice
          name: data
      securityContext:
        fsGroup: 111
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: authservice-pvc
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: eventing-webhook
  namespace: knative-eventing
spec:
  minAvailable: 80%
  selector:
    matchLabels:
      app: eventing-webhook
      app.kubernetes.io/component: knative-eventing
      app.kubernetes.io/name: knative-eventing
      kustomize.component: knative
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  labels:
    serving.knative.dev/release: v0.22.1
  name: activator-pdb
  namespace: knative-serving
spec:
  minAvailable: 80%
  selector:
    matchLabels:
      app: activator
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  labels:
    serving.knative.dev/release: v0.22.1
  name: webhook-pdb
  namespace: knative-serving
spec:
  minAvailable: 80%
  selector:
    matchLabels:
      app: webhook
---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: broker-filter-hpa
  namespace: knative-eventing
spec:
  maxReplicas: 10
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 70
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mt-broker-filter
---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: broker-ingress-hpa
  namespace: knative-eventing
spec:
  maxReplicas: 10
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 70
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mt-broker-ingress
---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: eventing-webhook
  namespace: knative-eventing
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 100
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: eventing-webhook
---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  labels:
    serving.knative.dev/release: v0.22.1
  name: activator
  namespace: knative-serving
spec:
  maxReplicas: 20
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 100
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: activator
---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  labels:
    serving.knative.dev/release: v0.22.1
  name: webhook
  namespace: knative-serving
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 100
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: webhook
---
apiVersion: caching.internal.knative.dev/v1alpha1
kind: Image
metadata:
  labels:
    serving.knative.dev/release: v0.22.1
  name: queue-proxy
  namespace: knative-serving
spec:
  image: gcr.io/knative-releases/knative.dev/serving/cmd/queue@sha256:0b8e031170354950f3395876961452af1c62f7ab5161c9e71867392c11881962
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: authn-filter
  namespace: istio-system
spec:
  configPatches:
  - applyTo: HTTP_FILTER
    listener:
      filterChain:
        filter:
          name: envoy.http_connection_manager
          subFilter:
            name: ""
    match:
      context: GATEWAY
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.ext_authz
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
          http_service:
            authorization_request:
              allowed_headers:
                patterns:
                - exact: authorization
                - exact: cookie
                - exact: x-auth-token
            authorization_response:
              allowed_upstream_headers:
                patterns:
                - exact: kubeflow-userid
            server_uri:
              cluster: outbound|8080||authservice.istio-system.svc.cluster.local
              timeout: 10s
              uri: http://authservice.istio-system.svc.cluster.local
  workloadSelector:
    labels:
      istio: ingressgateway
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  labels:
    release: istio
  name: cluster-local-gateway
  namespace: istio-system
spec:
  selector:
    app: cluster-local-gateway
    istio: cluster-local-gateway
  servers:
  - hosts:
    - '*'
    port:
      name: http
      number: 80
      protocol: HTTP
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  labels:
    networking.knative.dev/ingress-provider: istio
    serving.knative.dev/release: v0.22.1
  name: knative-local-gateway
  namespace: knative-serving
spec:
  selector:
    app: cluster-local-gateway
    istio: cluster-local-gateway
  servers:
  - hosts:
    - '*'
    port:
      name: http
      number: 8081
      protocol: HTTP
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: kubeflow-gateway
  namespace: kubeflow
spec:
  selector:
    istio: ingressgateway
  servers:
  - hosts:
    - '*'
    port:
      name: http
      number: 80
      protocol: HTTP
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: dex
  namespace: auth
spec:
  gateways:
  - kubeflow/kubeflow-gateway
  hosts:
  - '*'
  http:
  - match:
    - uri:
        prefix: /dex/
    route:
    - destination:
        host: dex.auth.svc.cluster.local
        port:
          number: 5556
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: cluster-local-gateway
  namespace: istio-system
spec:
  action: ALLOW
  rules:
  - {}
  selector:
    matchLabels:
      app: cluster-local-gateway
      istio: cluster-local-gateway
---
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  labels:
    networking.knative.dev/ingress-provider: istio
    serving.knative.dev/release: v0.22.1
  name: domainmapping-webhook
  namespace: knative-serving
spec:
  portLevelMtls:
    "8443":
      mode: PERMISSIVE
  selector:
    matchLabels:
      app: domainmapping-webhook
---
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  labels:
    networking.knative.dev/ingress-provider: istio
    serving.knative.dev/release: v0.22.1
  name: istio-webhook
  namespace: knative-serving
spec:
  portLevelMtls:
    "8443":
      mode: PERMISSIVE
  selector:
    matchLabels:
      app: istio-webhook
---
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  labels:
    networking.knative.dev/ingress-provider: istio
    serving.knative.dev/release: v0.22.1
  name: webhook
  namespace: knative-serving
spec:
  portLevelMtls:
    "8443":
      mode: PERMISSIVE
  selector:
    matchLabels:
      app: webhook
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: authservice-pvc
  namespace: istio-system
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: sinkbindings.webhook.sources.knative.dev
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: eventing-webhook
      namespace: knative-eventing
  failurePolicy: Fail
  name: sinkbindings.webhook.sources.knative.dev
  sideEffects: None
  timeoutSeconds: 10
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: webhook.eventing.knative.dev
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: eventing-webhook
      namespace: knative-eventing
  failurePolicy: Fail
  name: webhook.eventing.knative.dev
  sideEffects: None
  timeoutSeconds: 10
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  labels:
    networking.knative.dev/ingress-provider: istio
    serving.knative.dev/release: v0.22.1
  name: webhook.istio.networking.internal.knative.dev
webhooks:
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    service:
      name: istio-webhook
      namespace: knative-serving
  failurePolicy: Fail
  name: webhook.istio.networking.internal.knative.dev
  objectSelector:
    matchExpressions:
    - key: serving.knative.dev/configuration
      operator: Exists
  sideEffects: None
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  labels:
    serving.knative.dev/release: v0.22.1
  name: webhook.serving.knative.dev
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: webhook
      namespace: knative-serving
  failurePolicy: Fail
  name: webhook.serving.knative.dev
  sideEffects: None
  timeoutSeconds: 10
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: config.webhook.eventing.knative.dev
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: eventing-webhook
      namespace: knative-eventing
  failurePolicy: Ignore
  name: config.webhook.eventing.knative.dev
  namespaceSelector:
    matchExpressions:
    - key: eventing.knative.dev/release
      operator: Exists
  sideEffects: None
  timeoutSeconds: 10
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  labels:
    networking.knative.dev/ingress-provider: istio
    serving.knative.dev/release: v0.22.1
  name: config.webhook.istio.networking.internal.knative.dev
webhooks:
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    service:
      name: istio-webhook
      namespace: knative-serving
  failurePolicy: Fail
  name: config.webhook.istio.networking.internal.knative.dev
  namespaceSelector:
    matchExpressions:
    - key: serving.knative.dev/release
      operator: Exists
  sideEffects: None
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  labels:
    serving.knative.dev/release: v0.22.1
  name: config.webhook.serving.knative.dev
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: webhook
      namespace: knative-serving
  failurePolicy: Fail
  name: config.webhook.serving.knative.dev
  namespaceSelector:
    matchExpressions:
    - key: serving.knative.dev/release
      operator: Exists
  sideEffects: None
  timeoutSeconds: 10
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  labels:
    app.kubernetes.io/component: knative-eventing
    app.kubernetes.io/name: knative-eventing
    eventing.knative.dev/release: v0.22.1
    kustomize.component: knative
  name: validation.webhook.eventing.knative.dev
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: eventing-webhook
      namespace: knative-eventing
  failurePolicy: Fail
  name: validation.webhook.eventing.knative.dev
  sideEffects: None
  timeoutSeconds: 10
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  labels:
    serving.knative.dev/release: v0.22.1
  name: validation.webhook.serving.knative.dev
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: webhook
      namespace: knative-serving
  failurePolicy: Fail
  name: validation.webhook.serving.knative.dev
  sideEffects: None
  timeoutSeconds: 10
